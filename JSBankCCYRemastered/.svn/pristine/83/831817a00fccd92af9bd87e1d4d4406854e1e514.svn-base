//
//  UIAlertController+AlertController.m
//  JSBankCCYRemastered
//
//  Created by Jack on 2019/6/16.
//  Copyright Â© 2019 Jack. All rights reserved.
//

#import "UIAlertController+AlertController.h"
#import <objc/runtime.h>

@implementation UIAlertController (AlertController)

+ (void)load {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        Method originalMethod = class_getInstanceMethod(self, @selector(viewWillLayoutSubviews));
        Method swizzledMethod = class_getInstanceMethod(self, @selector(kviewWillLayoutSubviews));
        method_exchangeImplementations(originalMethod, swizzledMethod);
    });
}
- (void)kviewWillLayoutSubviews {
    NSLog(@"-------- %@",self);

//    [self kviewWillLayoutSubviews];
    
    if ([NSStringFromClass([self class]) isEqualToString:@"UIAlertController"]) {
        
        UIView *view1 = self.view.subviews.lastObject;
        UIView *actionGroupView = view1.subviews.lastObject;
        UIView *view = actionGroupView.subviews.lastObject;
        UIView *rSequenceView = view.subviews.lastObject;
        UIView *sSequenceView = rSequenceView.subviews.firstObject;
        UIView *stackView = sSequenceView.subviews.firstObject;
        
        NSMutableArray *customViewRepresentationViews = [stackView.subviews mutableCopy];
        [customViewRepresentationViews removeLastObject];
        
        UIView *firstCustomViewRepresentationView = customViewRepresentationViews.firstObject;
        UIView *lastCustomViewRepresentationView = customViewRepresentationViews.lastObject;
        
        UIView *actionViewFirst = firstCustomViewRepresentationView.subviews.firstObject;
        UIView *actionViewSecend = lastCustomViewRepresentationView.subviews.firstObject;
        
        [actionViewFirst.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
        [actionViewSecend.subviews makeObjectsPerformSelector:@selector(removeFromSuperview)];
        
        NSString *okTitle = @"";
        NSString *cancelTitle = @"";
        if (self.actions.count) {
            for (UIAlertAction *action in self.actions) {
                if (action.style == UIAlertActionStyleCancel) {
                    cancelTitle = action.title;
                } else {
                    okTitle = action.title;
                }
            }
        }
        if (actionViewSecend && cancelTitle.notNull) {
            UILabel *label1 = [[UILabel alloc] initWithFrame:actionViewSecend.bounds];
            label1.backgroundColor = [[UIColor redColor] colorWithAlphaComponent:0.0];
            label1.textColor = self.cancelButtonColor ? self.cancelButtonColor : Color().MainBlue;
            label1.textAlignment = NSTextAlignmentCenter;
            label1.font = self.cancelButtonFont ? self.cancelButtonFont : [UIFont boldSystemFontOfSize:17];
            [actionViewSecend addSubview:label1];
            
            NSMutableAttributedString *string = [[NSMutableAttributedString alloc] initWithString:cancelTitle];
            
            if (self.cancelButtonImage) {
                NSTextAttachment *textAttachment = [[NSTextAttachment alloc] initWithData:nil ofType:nil];
                UIImage * smileImage = self.cancelButtonImage;
                textAttachment.image = smileImage;
                textAttachment.bounds = CGRectMake(-10, -6, 25, 25);
                NSAttributedString *textAttachmentString = [NSAttributedString attributedStringWithAttachment:textAttachment];
                [string insertAttributedString:textAttachmentString atIndex:0];

            }
            label1.attributedText = string;
            
        }
        
        if (actionViewFirst && okTitle.notNull) {
            UILabel *label = [[UILabel alloc] initWithFrame:actionViewFirst.bounds];
            label.backgroundColor = [[UIColor redColor] colorWithAlphaComponent:0.0];
            label.textColor = self.otherButtonColor ? self.otherButtonColor : Color().MainBlue;
            label.textAlignment = NSTextAlignmentCenter;
            label.font = self.otherButtonFont ? self.otherButtonFont : [UIFont boldSystemFontOfSize:17];
            [actionViewFirst addSubview:label];
            
            
            
            NSMutableAttributedString *string = [[NSMutableAttributedString alloc] initWithString:okTitle];
            
            if (self.okButtonImage) {
                NSTextAttachment *textAttachment = [[NSTextAttachment alloc] initWithData:nil ofType:nil];
                UIImage * smileImage = self.okButtonImage;
                textAttachment.image = smileImage;
                textAttachment.bounds = CGRectMake(-10, -6, 25, 25);
                NSAttributedString *textAttachmentString = [NSAttributedString attributedStringWithAttachment:textAttachment];
                [string insertAttributedString:textAttachmentString atIndex:0];
                
            }
            label.attributedText = string;
        }
            
    }
    
}

- (void)setOtherButtonTitle:(NSString *)otherButtonTitle {
    objc_setAssociatedObject(self, @selector(otherButtonTitle), otherButtonTitle, OBJC_ASSOCIATION_COPY);
}
- (NSString *)otherButtonTitle {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)setCancelButtonFont:(UIFont *)cancelButtonFont {
    objc_setAssociatedObject(self, @selector(cancelButtonFont), cancelButtonFont, OBJC_ASSOCIATION_COPY);
}
- (UIFont *)cancelButtonFont {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)setOtherButtonFont:(UIFont *)otherButtonFont {
    objc_setAssociatedObject(self, @selector(otherButtonFont), otherButtonFont, OBJC_ASSOCIATION_COPY);
}
- (UIFont *)otherButtonFont {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)setCancelButtonTitle:(NSString *)cancelButtonTitle {
    objc_setAssociatedObject(self, @selector(cancelButtonTitle), cancelButtonTitle, OBJC_ASSOCIATION_COPY);
}
- (NSString *)cancelButtonTitle {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)setOkButtonImage:(UIImage *)okButtonImage {
    objc_setAssociatedObject(self, @selector(okButtonImage), okButtonImage, OBJC_ASSOCIATION_RETAIN);
}
- (UIImage *)okButtonImage {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)setCancelButtonColor:(UIColor *)cancelButtonColor {
    objc_setAssociatedObject(self, @selector(cancelButtonColor), cancelButtonColor, OBJC_ASSOCIATION_RETAIN);
}
- (UIColor *)cancelButtonColor {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)setOtherButtonColor:(UIColor *)otherButtonColor {
    objc_setAssociatedObject(self, @selector(otherButtonColor), otherButtonColor, OBJC_ASSOCIATION_RETAIN);
}
- (UIColor *)otherButtonColor {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)setCancelButtonImage:(UIImage *)cancelButtonImage {
    objc_setAssociatedObject(self, @selector(cancelButtonImage), cancelButtonImage, OBJC_ASSOCIATION_RETAIN);
}
- (UIImage *)cancelButtonImage {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)setAction:(void (^)(void))action {
    objc_setAssociatedObject(self, @selector(action), action, OBJC_ASSOCIATION_COPY);
}

- (CustomAction)action {
    return objc_getAssociatedObject(self, _cmd);
}

- (void)ccy_dismiss {
    __weak typeof(self) weakSelf = self;
    [self dismissViewControllerAnimated:YES completion:^{
        if (weakSelf.action) {
            weakSelf.action();
        }
    }];
}

@end
