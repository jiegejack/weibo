//
//  DJAlbumManager.m
//  DJAlbumManager
//
//  Created by Jack on 2017/12/20.
//  Copyright © 2017年 JaDJDragView. All rights reserved.
//
//没有给自定义相册名称,默认名称
#define defualt_folder @"自定义相册"

#import "DJAlbumManager.h"
#import <Photos/Photos.h>

@implementation DJAlbumManager

+ (void)saveVideoToPhotoWithPath:(NSString *)path complete:(void(^)(PHAlbumState state))completeHandle {
    __weak typeof(self) weakSelf = self;
    [self userAuthorizationPhotosComplete:^(PHAlbumState state) {
        if (state == PHAlbumStateUserAuthorized) {
            [weakSelf asyncSaveToPhotosWithObject:path complete:^(PHAlbumState state) {
                if (completeHandle) {
                    completeHandle(state);
                }
            }];
            return;
        }
        if (completeHandle) {
            completeHandle(state);
        }
    }];
}

+ (void)saveImageToPhotoWithImage:(UIImage *)image complete:(void(^)(PHAlbumState state))completeHandle {
    __weak typeof(self) weakSelf = self;
    [self userAuthorizationPhotosComplete:^(PHAlbumState state) {
        if (state == PHAlbumStateUserAuthorized) {
            [weakSelf asyncSaveToPhotosWithObject:image complete:^(PHAlbumState state) {
                if (completeHandle) {
                    completeHandle(state);
                }
            }];
            return;
        }
        if (completeHandle) {
            completeHandle(state);
        }
    }];
}

+ (void)saveVideoToCustomPhotoWithPath:(NSString *)path folderName:(nullable NSString *)folderName complete:(void (^)(PHAlbumState))completeHandle {
    __weak typeof(self) weakSelf = self;
    [self userAuthorizationPhotosComplete:^(PHAlbumState state) {
        if (state == PHAlbumStateUserAuthorized) {
            NSString *tempName = defualt_folder;
            if (folderName.length) {tempName = folderName;}
            [weakSelf createFolder:tempName complete:^(PHAlbumState state) {
                if (state == PHAlbumStateCreateFolderSuccess || state == PHAlbumStateFolderIsExist) {
                    [weakSelf asyncSaveToCustomPhotosWithObject:path folderName:tempName complete:^(PHAlbumState state) {
                        if (completeHandle) {
                            completeHandle(state);
                        }
                    }];
                }
            }];
            return;
        }
        if (completeHandle) {
            completeHandle(state);
        }
    }];
}

+ (void)saveImageToCustomPhotoWithImage:(UIImage *)image folderName:(nullable NSString *)folderName complete:(void(^)(PHAlbumState state))completeHandle {
    __weak typeof(self) weakSelf = self;
    [self userAuthorizationPhotosComplete:^(PHAlbumState state) {
        if (state == PHAlbumStateUserAuthorized) {
            NSString *tempName = defualt_folder;
            if (folderName.length) {tempName = folderName;}
            [weakSelf createFolder:tempName complete:^(PHAlbumState state) {
                if (state == PHAlbumStateCreateFolderSuccess || state == PHAlbumStateFolderIsExist) {
                    [weakSelf asyncSaveToCustomPhotosWithObject:image folderName:tempName complete:^(PHAlbumState state) {
                        if (completeHandle) {
                            completeHandle(state);
                        }
                    }];
                }
            }];
            return;
        }
        if (completeHandle) {
            completeHandle(state);
        }
    }];
}

+ (void)asyncSaveToCustomPhotosWithObject:(id)objc folderName:(NSString *)folderName complete:(void(^)(PHAlbumState state))completeHandle {
    if (!objc) {return;}
    __block NSString *localIdentifier;
    PHFetchResult *collectonResuts = [PHCollectionList fetchTopLevelUserCollectionsWithOptions:nil];
    [collectonResuts enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        PHAssetCollection *assetCollection = obj;
        if ([assetCollection.localizedTitle isEqualToString:folderName])  {
            [[PHPhotoLibrary sharedPhotoLibrary] performChanges:^{
                PHAssetChangeRequest *assetRequest = nil;
                if ([objc isKindOfClass:[UIImage class]]) {
                    assetRequest = [PHAssetChangeRequest creationRequestForAssetFromImage:(UIImage *)objc];
                } else if ([objc isKindOfClass:[NSString class]]) {
                    NSURL *url = [NSURL fileURLWithPath:(NSString *)objc];
                    assetRequest = [PHAssetChangeRequest creationRequestForAssetFromVideoAtFileURL:url];
                }
                PHAssetCollectionChangeRequest *collectonRequest = [PHAssetCollectionChangeRequest changeRequestForAssetCollection:assetCollection];
                PHObjectPlaceholder *placeHolder = [assetRequest placeholderForCreatedAsset];
                [collectonRequest addAssets:@[placeHolder]];
                localIdentifier = placeHolder.localIdentifier;
            } completionHandler:^(BOOL success, NSError *error) {
                if (success) {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if (completeHandle) {
                            completeHandle(PHAlbumStateSaveSuccess);
                        }
                    });
                } else {
                    dispatch_async(dispatch_get_main_queue(), ^{
                        if (completeHandle) {
                            completeHandle(PHAlbumStateSaveFailed);
                        }
                    });
                }
            }];
        }
    }];
}

+ (void)asyncSaveToPhotosWithObject:(id)obj complete:(void(^)(PHAlbumState state))completeHandle {
    if (!obj) {return;}
    [[PHPhotoLibrary sharedPhotoLibrary] performChanges:^{
        if ([obj isKindOfClass:[UIImage class]]) {
            [PHAssetChangeRequest creationRequestForAssetFromImage:(UIImage *)obj];
        } else if ([obj isKindOfClass:[NSString class]]) {
            NSURL *url = [NSURL fileURLWithPath:(NSString *)obj];
            [PHAssetChangeRequest creationRequestForAssetFromVideoAtFileURL:url];
        }
    } completionHandler:^(BOOL success, NSError * _Nullable error) {
        if (error) {
            dispatch_async(dispatch_get_main_queue(), ^{
                if (completeHandle) {
                    completeHandle(PHAlbumStateSaveFailed);
                }
            });
        } else {
            dispatch_async(dispatch_get_main_queue(), ^{
                if (completeHandle) {
                    completeHandle(PHAlbumStateSaveSuccess);
                }
            });
        }
    }];
}

+ (BOOL)isExistFolder:(NSString *)folderName {
    PHFetchResult *collectonResuts = [PHCollectionList fetchTopLevelUserCollectionsWithOptions:nil];
    __block BOOL isExisted = NO;
    [collectonResuts enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
        PHAssetCollection *assetCollection = obj;
        if ([assetCollection.localizedTitle isEqualToString:folderName])  {
            isExisted = YES;
        }
    }];
    return isExisted;
}

+ (void)createFolder:(NSString *)folderName complete:(void(^)(PHAlbumState state))completeHandle {
    if (![self isExistFolder:folderName]) {
        [[PHPhotoLibrary sharedPhotoLibrary] performChanges:^{
            [PHAssetCollectionChangeRequest creationRequestForAssetCollectionWithTitle:folderName];
        } completionHandler:^(BOOL success, NSError * _Nullable error) {
            if (success) {
                if (completeHandle) {
                    completeHandle(PHAlbumStateCreateFolderSuccess);
                }
            } else {
                if (completeHandle) {
                    completeHandle(PHAlbumStateCreateFolderFailed);
                }
            }
        }];
    } else {
        if (completeHandle) {
            completeHandle(PHAlbumStateFolderIsExist);
        }
    }
}

+ (void)userAuthorizationPhotosComplete:(void(^)(PHAlbumState state))completeHandle {
    PHAuthorizationStatus lastStatus = [PHPhotoLibrary authorizationStatus];
    [PHPhotoLibrary requestAuthorization:^(PHAuthorizationStatus status) {
        dispatch_async(dispatch_get_main_queue(), ^{
            if (status == PHAuthorizationStatusDenied) {
                if (lastStatus == PHAuthorizationStatusNotDetermined) {
                    if (completeHandle) {completeHandle(PHAlbumStateUserRefusedAuthor);}return;}
                if (completeHandle) {
                    completeHandle(PHAlbumStateUserAuthorAgain);
                }
            } else if (status == PHAuthorizationStatusAuthorized) {
                if (completeHandle) {
                    completeHandle(PHAlbumStateUserAuthorized);
                }
            } else if (status == PHAuthorizationStatusRestricted) {
                if (completeHandle) {
                    completeHandle(PHAlbumStateSystemCannotAuthor);
                }
            }
        });
    }];
}

@end
