//
//  DJDateManager.m
//  Demo
//
//  Created by Jack on 2017/12/28.
//  Copyright © 2017年 JaDJDragView. All rights reserved.
//

#import "DJDateManager.h"

@implementation DJDateManager

+ (NSDate *)getDateFromDateString:(NSString *)dateString dateFormate:(NSString *)formate {
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:formate];

    return [formatter dateFromString:dateString];
}

+ (NSString *)getDateStringFromDate:(NSDate *)date dateFormate:(NSString *)formate {
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:formate];

    return [dateFormatter stringFromDate:date];
}

+ (NSDate *)formateDate:(NSDate *)date dateFormate:(NSString *)formate {
    NSString *dateString = [DJDateManager getDateStringFromDate:date dateFormate:formate];

    return [self getDateFromDateString:dateString dateFormate:formate];
}

+ (NSInteger)getDaysForMonthAtDate:(NSDate *)date {
    NSCalendar * calendar = [NSCalendar currentCalendar];
    NSInteger monthNum = [calendar rangeOfUnit:NSCalendarUnitDay inUnit:NSCalendarUnitMonth forDate:date].length;

    return monthNum;
}

+ (NSInteger)getStartDayWithDate:(NSDate *)date {
    NSString *day = [self getDateStringFromDate:date dateFormate:@"dd"];
    NSInteger startDay = 1;
    
    if (day.integerValue <= 28) {
        startDay = [self getSectionWithDay:day.integerValue start:YES];
    } else {
        startDay = 29;
    }
    
    return startDay;
}

+ (NSInteger)getEndDayWithDate:(NSDate *)date {
    NSString *dateString = [self getDateStringFromDate:date dateFormate:@"yyyy-MM"];
    NSInteger days = [self getDaysForMonthAtDate:[self getDateFromDateString:dateString dateFormate:@"yyyy-MM"]];
    NSString *day = [self getDateStringFromDate:date dateFormate:@"dd"];
    NSInteger startDay = 1;
    if (day.integerValue <= 28) {
        startDay = [self getSectionWithDay:day.integerValue start:NO];
    } else {
        startDay = days;
    }
    
    return startDay;
}

+ (NSInteger)getSectionWithDay:(NSInteger)day start:(BOOL)start {
    NSInteger sectionDay = 1;
    if (day >= 1 && day <= 7) {
        sectionDay = start ? 1 : 7;
    }
    if (day >= 8 && day <= 14) {
        sectionDay = start ? 8 : 14;
    }
    if (day >= 15 && day <= 21) {
        sectionDay = start ? 15 : 21;
    }
    if (day >=22 && day <= 28) {
        sectionDay = start ? 22 : 28;
    }
    
    return sectionDay;
}

+ (NSDate *)getLastDate:(NSDate *)date {
    NSString *dayString = [self getDateStringFromDate:date dateFormate:@"dd"];
    NSInteger day = dayString.integerValue;
    if (day >= 1 && day <= 7) {
        NSString *yearMonth = [self getDateStringFromDate:date dateFormate:@"yyyy-MM"];
        date = [self getDateFromDateString:[NSString stringWithFormat:@"%@-07",yearMonth] dateFormate:@"yyyy-MM-dd"];
    }
    return [NSDate dateWithTimeInterval:-7*24*60*60 sinceDate:date];
}

+ (NSDate *)getNextDate:(NSDate *)date {
    NSInteger allDays = [self getDaysForMonthAtDate:date];
    if (allDays <= 28) {
        
        return [NSDate dateWithTimeInterval:7*24*60*60 sinceDate:date];
    } else {
        NSString *dayString = [self getDateStringFromDate:date dateFormate:@"dd"];
        NSInteger day = dayString.integerValue;
        if (day >= 22 && day <= 28) {
            NSString *yearMonth = [self getDateStringFromDate:date dateFormate:@"yyyy-MM"];
            NSDate *newDate = [self getDateFromDateString:[NSString stringWithFormat:@"%@-%ld",yearMonth,(long)allDays] dateFormate:@"yyyy-MM-dd"];
            
            return newDate;
        } else {
            return [NSDate dateWithTimeInterval:7*24*60*60 sinceDate:date];
        }
    }
}

+ (NSDate *)getNextSingleDate:(NSDate *)date {
    return [NSDate dateWithTimeInterval:24*60*60 sinceDate:date];
}

+ (NSDate *)getLastSingleDate:(NSDate *)date {
    return [NSDate dateWithTimeInterval:-24*60*60 sinceDate:date];
}


+ (NSString *)getWeekDayStringWithDate:(NSDate *)date {
    NSCalendar * calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    NSDateComponents *comps = [calendar components:NSCalendarUnitWeekday fromDate:date];
    NSNumber * weekNumber = @([comps weekday]);
    NSInteger weekInt = [weekNumber integerValue];
    NSString *weekDayString = @"周一";
    switch (weekInt) {
        case 1:
        {
            weekDayString = @"周日";
        }
            break;
        case 2:
        {
            weekDayString = @"周一";
        }
            break;
        case 3:
        {
            weekDayString = @"周二";
        }
            break;
        case 4:
        {
            weekDayString = @"周三";
        }
            break;
        case 5:
        {
            weekDayString = @"周四";
        }
            break;
        case 6:
        {
            weekDayString = @"周五";
        }
            break;
        case 7:
        {
            weekDayString = @"周六";
        }
            break;
        default:
            break;
    }
    
    return weekDayString;
}

+ (NSInteger)numberOfDaysWithFromDate:(NSDate *)fromDate toDate:(NSDate *)toDate {
    NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
    
    NSDateComponents *comp = [calendar components:NSCalendarUnitDay fromDate:fromDate toDate:toDate options:NSCalendarWrapComponents];
       NSLog(@" -- >>  comp : %@  << --",comp);
    
     return comp.day;
}

@end
