//
//  JSFaceRecordViewController.m
//  JSBankCCYRemastered
//
//  Created by Jack on 2019/4/29.
//  Copyright © 2019 Jack. All rights reserved.
//

#import "JSFaceRecordViewController.h"
#import "LivenessDetector.h"
#import "BottomAnimationView.h"
#import "MessageView.h"
#import "CountZeroManager.h"

@interface JSFaceRecordViewController () <AVCaptureVideoDataOutputSampleBufferDelegate,MGLivenessProtocolDelegate,MessageViewDelegate>
@property(nonatomic,strong)AVCaptureSession *session;
@property(nonatomic,strong)AVCaptureDeviceInput *videoInput;
@property (nonatomic, strong) NSMutableArray *imageArray;
@property (nonatomic, strong) MessageView *messageView;
@property(nonatomic,strong)UIImageView *photoBackImageView;
@property(nonatomic,strong)UIImageView *boardImageView;
@property(nonatomic,strong)UIImageView *headLogImageView;
@property(nonatomic,strong)BottomAnimationView *bottomView;
@property (nonatomic, strong) NSMutableArray *actionArray;
@property(nonatomic,strong)AVCaptureVideoPreviewLayer *previewLayer;
@property(nonatomic,assign)BOOL starLiveness;
@property(nonatomic,assign)NSInteger step;
@property(nonatomic,strong)MGLivenessDetector *livenessDetector;

@end

@implementation JSFaceRecordViewController

- (AVCaptureSession *)session {
    if (!_session) {
        _session = [[AVCaptureSession alloc] init];
        _session.sessionPreset = AVCaptureSessionPreset640x480;
        if ([_session canAddInput:self.videoInput]) {
            [_session addInput:self.videoInput];
        }
        AVCaptureVideoDataOutput *output = [[AVCaptureVideoDataOutput alloc] init];
        [_session addOutput:output];
        output.alwaysDiscardsLateVideoFrames = YES;
        dispatch_queue_t queue = dispatch_queue_create("myQueue", NULL);
        [output setSampleBufferDelegate:self queue:queue];
        output.videoSettings =[NSDictionary dictionaryWithObject:[NSNumber numberWithInt:kCVPixelFormatType_32BGRA]
                                                          forKey:(id)kCVPixelBufferPixelFormatTypeKey];
    }
    return _session;
}

- (MGLivenessDetector *)livenessDetector {
    if (!_livenessDetector) {
        NSDictionary *options=[NSDictionary dictionaryWithObjectsAndKeys:[[NSBundle mainBundle] pathForResource:@"model" ofType:@""],MGLivenessDetectorModelPath, nil];
        _livenessDetector=[MGLivenessDetector detectorOfOptions:options];
        [_livenessDetector setDelegate:self];
        [_livenessDetector reset];
    }
    return _livenessDetector;
}

- (UIImageView *)photoBackImageView {
    if (!_photoBackImageView) {
        _photoBackImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"photo_bg.png"]];
        _photoBackImageView.frame = CGRectMake(0, Height-Height/3.0, Width, Height/3.0);
        
    }
    return _photoBackImageView;
    
}

- (BottomAnimationView *)bottomView {
    if (!_bottomView) {
        _bottomView = [[BottomAnimationView alloc] initWithFrame:CGRectMake(0, Height-Height/3.0, Width, Height/3.0)];
    }
    return _bottomView;
}

- (AVCaptureDeviceInput *)videoInput {
    if (!_videoInput) {
        _videoInput = [[AVCaptureDeviceInput alloc] initWithDevice:[self cameraWithPosition:AVCaptureDevicePositionFront] error:nil];
    }
    return _videoInput;
}

//前后摄像头 AVCaptureDevicePositionFront前置 AVCaptureDevicePositionBack后置
- (AVCaptureDevice *)cameraWithPosition:(AVCaptureDevicePosition)position {
    NSArray *devices = [AVCaptureDevice devicesWithMediaType:AVMediaTypeVideo];
    for (AVCaptureDevice *device in devices) {
        if ([device position] == position) {
            return device;
        }
    }
    return nil;
}

- (NSMutableArray *)imageArray {
    if (!_imageArray) {
        _imageArray=@[].mutableCopy;
    }
    return _imageArray;
}

- (void)initView {
    self.messageView = [MessageView shareManager];
    [self.messageView setDelegate:self];
    [self.view addSubview:self.photoBackImageView];
    [self.view addSubview:self.bottomView];
    [self restArray];
    [self startSession];
}

#pragma mark -重置随机动作数组
-(void)restArray
{
    self.actionArray=nil;
    self.actionArray=[NSMutableArray arrayWithObjects:@1,@2,@3,@4,nil];
}


-(void)startSession
{
    if ([self checkVAuthorization])
    {
        [self setUpCameraLayer];
        
        [self willStatLiveness];
        
        [self initHardCode:NO];

        if (self.session)
        {
            [self.session startRunning];
        }
    }
}
-(BOOL)checkVAuthorization
{
    
    BOOL isAllow =YES;
    __block JSFaceRecordViewController *tmpSelf =self;
    if ([PCDevice systemVersion].doubleValue > 7.0)
    {
        AVAuthorizationStatus authStatus = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];
        if(authStatus == AVAuthorizationStatusDenied || authStatus == AVAuthorizationStatusRestricted){
            //未允许使用相机
//            [PNCShareUtil showAlert:@"您的相机隐私授权尚未打开，若要打开请前往 设置-隐私-相机 中打开。" doneTitle:@"确定" cancelTitle:nil doneHandle:^{
//                [tmpSelf.navigationController popViewControllerAnimated:YES];
//            } cancelHandle:nil];
            isAllow =NO;
        }
    }
    return isAllow;
}
//加载图层预览
- (void) setUpCameraLayer
{
    if (self.previewLayer == nil)
    {
        self.previewLayer = [[AVCaptureVideoPreviewLayer alloc] initWithSession:self.session];
        CALayer * viewLayer = [self.view layer];
        [self.previewLayer setFrame:CGRectMake(0, self.navigationBarHeight, Width, Height-Height/3.0-self.navigationBarHeight)];
        [self.previewLayer setVideoGravity:AVLayerVideoGravityResizeAspectFill];
        [viewLayer insertSublayer:self.previewLayer below:[[viewLayer sublayers] objectAtIndex:0]];
        
        self.boardImageView=[[UIImageView alloc]initWithImage:[UIImage imageNamed:@"photo_board.png"]];
        self.boardImageView.frame=CGRectMake(0,self.navigationBarHeight,Width,Height-Height/3.0 - self.navigationBarHeight);
        [self.view addSubview:self.boardImageView];
        
        self.headLogImageView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"header_bg_img.png"]];
        self.headLogImageView.frame=CGRectMake(0, self.navigationBarHeight, Width, Height-Height/3.0-self.navigationBarHeight);
        [self.view addSubview:self.headLogImageView];
    }
    [self.view bringSubviewToFront:self.bottomView];
}

/**
 *  即将开始检测，显示倒计时
 */
- (void)willStatLiveness
{
    [[[CountZeroManager alloc] init] starOpen];
    [self performSelector:@selector(starLivenessWithBuff) withObject:nil afterDelay:3.0f];
}

-(void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [self stopSession];
}

//开启检查
-(void)starLivenessWithBuff
{
    [self.livenessDetector reset];
    self.starLiveness = YES;
    MGLivenessDetectionType type = [self randActionType];
    [self.livenessDetector changeDetectionType:type];
    [self starAnimation:type];
}
//播放动作提示动画
- (void)starAnimation:(MGLivenessDetectionType )type
{
    [self.bottomView willChangeAnimation:type outTime:10];
    if ([UIScreen mainScreen].bounds.size.height >= 568) {
        [self.bottomView startRollAnimation];
    }
}

//随机一个动作
- (MGLivenessDetectionType)randActionType
{
    NSInteger type = arc4random()%(self.actionArray.count);
    MGLivenessDetectionType detectionType = (MGLivenessDetectionType)[self.actionArray[type] integerValue];
    [self.actionArray removeObjectAtIndex:type];
    return detectionType;
}

- (void)initHardCode:(BOOL)check
{
    _starLiveness = check;
    self.step = 0;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    self.title = @"视频认证";
    [self initView];
}

#pragma mark - delegate
- (void)captureOutput:(AVCaptureOutput *)captureOutput
didOutputSampleBuffer:(CMSampleBufferRef)sampleBuffer
       fromConnection:(AVCaptureConnection *)connection
{
    if (_starLiveness)
    {
        [self.livenessDetector detectWithBuffer:sampleBuffer orientation:UIImageOrientationRight];
    }
}

-(void)onFrameDetected:(MGLivenessDetectionFrame *)frame andTimeout:(float) timeout{}

-(void)onDetectionFailed:(MGLivenessDetectionFailedType)failedType
{
    if(self.session)
    {

        dispatch_async_safe(^{

            NSString *message;
            if (failedType==DETECTION_FAILED_TYPE_ACTIONBLEND || failedType==DETECTION_FAILED_TYPE_FACELOSTNOTCONTINUOUS || failedType==DETECTION_FAILED_TYPE_TOOMANYFACELOST || failedType==DETECTION_FAILED_TYPE_FACENOTCONTINUOUS || failedType==DETECTION_FAILED_TYPE_MASK )
            {
                message=@"检测失败，请按照提示做出相应的动作";
            }
            else if (failedType==DETECTION_FAILED_TYPE_NOTVIDEO)
            {
                message=@"您的动作不符合规范，请重新按照提示做出相应的动作";
            }
            else if(failedType==DETECTION_FAILED_TYPE_TIMEOUT)
            {
                message=@"检测超时，请在规定时间内按照提示完成相应动作";
            }
            if (self.session)
            {
                [self.session stopRunning];
            }
            [self starAnimation:DETECTION_TYPE_NONE];
//            [PNCShareUtil showAlert:message doneTitle:@"重新操作" cancelTitle:@"取消" doneHandle:^{
//                [self setUpCameraLayer];
//                [self willStatLiveness];
//                [self restArray];
//                [self initHardCodeWithCheckNO];
//                [self.imageArray removeAllObjects];
//                if (self.session)
//                {
//                    [self.session startRunning];
//                }
//
//            } cancelHandle:^{
//                [self popViewControllerAnimated:YES];
//            }];
        });
    }

}

- (MGLivenessDetectionType)onDetectionSuccess:(MGLivenessDetectionFrame *)faceInfo
{
    [self.imageArray addObject:faceInfo];

    _starLiveness = NO;

    MGLivenessDetectionType detectionType = [self randActionType];
    self.step++;

    if (self.step == 3)
    {
        detectionType = DETECTION_TYPE_DONE;
    }
    else
    {
        _starLiveness = YES;
    }

    dispatch_async_safe(^{
        //识别成功
        if (self.step != 3)
        {
            [self starAnimation:detectionType];
        }
        else
        {
            _starLiveness = YES;
//            [self uploadImage:[self getBestQuilityImage]];
            [self stopSession];
        }
    });
    return detectionType;
}

#pragma mark -Stop
-(void)stopSession
{
    self.starLiveness = NO;
    [self.bottomView removeFromSuperview];
    self.bottomView = nil;
    self.messageView = nil;
    self.livenessDetector = nil;
    [self.previewLayer removeFromSuperlayer];
    self.previewLayer=nil;
    if (self.session)
    {
        [self.session stopRunning];
    }
    if (self.session.inputs.count>0)
    {
        AVCaptureInput* input = [self.session.inputs objectAtIndex:0];
        [self.session removeInput:input];
        AVCaptureVideoDataOutput* output = (AVCaptureVideoDataOutput*)[self.session.outputs objectAtIndex:0];
        [self.session removeOutput:output];
    }
    self.session = nil;
}

#pragma mark-
- (void)messageView:(MessageView *)view tag:(NSInteger)tag
{
    self.step = 0;
    [self.livenessDetector reset];
    [self performSelector:@selector(initHardCodeWithCheckYES) withObject:nil afterDelay:0.5f];
}


// photo/faceDetect.do
#pragma mark -上传照片
-(void)uploadImage:(UIImage *)image
{
//    [PNCShareUtil showWaitViewInSuperView:self.view];
    
    NSData *data=UIImageJPEGRepresentation(image, 0.2f);
    
    NSString *encodedImageStr = [data base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
    
    NSDictionary *dataDict=@{@"TYPE":self.type,@"IMAGE_BEST":encodedImageStr};
    
    NSString *json=[dataDict JSONRepresentation];
    
//    json=[PNCUtil getFinalStringWithString:json];
    
//    NSData *postData=[json dataUsingEncoding:NSUTF8StringEncoding];
//    [CCYHttpRequestManager requstWithURL:[PNCShareUtil getServerURL:Server_FaceDeteUpLoad_URL] requestPostData:postData requestCompleteHandle:^(NSDictionary *resultDataDict)
//     {
//         [PNCShareUtil hideWaitView];
//         if ([[resultDataDict objectForKey:@"STATUS"] integerValue]==1)
//         {
//             if(self != self.navigationController.viewControllers.lastObject)
//             {return;}
//             [PNCShareUtil showAlert:@"视频认证成功" doneTitle:@"确定" cancelTitle:nil doneHandle:^{
//
//                 if (self.callBackHandle)
//                 {
//                     self.callBackHandle(resultDataDict);
//                 }
//                 [self.navigationController popViewControllerAnimated:NO];
//
//             } cancelHandle:nil];
//         }
//         else
//         {
//             if (self != self.navigationController.viewControllers.lastObject)
//             {return;}
//             [PNCShareUtil showAlert:[resultDataDict objectForKey:@"MSG"] doneTitle:@"重新识别" cancelTitle:@"取消" doneHandle:^{
//                 [self initView];
//             } cancelHandle:^{
//                 if (self.callFailHandle) {
//                     self.callFailHandle();
//                 }
//                 [self.navigationController popViewControllerAnimated:YES];
//             }];
//         }
//     } requestFailedHandle:^(NSString *errorMessage) {
//         if (self.callFailHandle) {
//             self.callFailHandle();
//         }
//         [self.navigationController popViewControllerAnimated:YES];
//     }];
}

#pragma mark -获取最优图片
-(UIImage *)getBestQuilityImage
{
    
    FaceIDData *faceData=[self.livenessDetector getFaceIDData];
    
    NSData *imageData=[faceData.images objectForKey:@"image_env"];
    
    UIImage *image=[UIImage imageWithData:imageData];
    
    return  image;
    //    //获取质量最好的一张图片
    //    CGFloat quality=0;
    //    UIImage *image;
    //    NSArray *imageArray=self.livenessDetector.getValidFrame;
    //    if (imageArray)
    //    {
    //        for (MGLivenessDetectionFrame *tmpFrame in imageArray)
    //        {
    //            if (tmpFrame.attr.smooth_quality>=quality)
    //            {
    //                quality=tmpFrame.attr.smooth_quality;
    //                image=tmpFrame.image;
    //            }
    //        }
    //    }
    //    return image;
}

@end
