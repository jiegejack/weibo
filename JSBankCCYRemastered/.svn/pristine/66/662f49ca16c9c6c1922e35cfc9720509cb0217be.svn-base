//
//  ClientNetManager.m
//  JSBankQNXY
//
//  Created by Jack on 2019/04/15.
//  Copyright © 2019 Jack. All rights reserved.
//

#import "ClientNetManager.h"
#import <objc/runtime.h>
#import "MJExtension.h"
#import "LoginSession.h"

@implementation ClientNetManager

+ (void)fetchSettingPasswordDataWithPwd:(NSString *)pwd
                              verifyPwd:(NSString *)vPwd
                                success:(void (^)(id resultResponse, id resultModel))success
                                failure:(void (^)(NSError *error, LoginSession *session))failure {
    
    NSString *custemployeNo = [JSSharedInstance sharedInstance].loginSession.custemployeNo;
    custemployeNo = custemployeNo.notNull ? custemployeNo : @"";
    NSDictionary *param = @{@"transChannel"  : @"iOS",
                            @"loginflag"     : @"3",
                            @"checkflag"     : @"2",
                            @"password"      : pwd,
                            @"repassword"    : vPwd,
                            @"custemployeNo" : custemployeNo};
    
    [self publicFetchDataWithPath:@"custCommon/setLoginPassword.do"
                            param:param
                      resultModel:nil
                          success:^(id resultResponse, id resultModel) {
                              
        if (success) {
            success(resultResponse, resultModel);
        }
    } failure:^(NSError *error, LoginSession *session) {
        if (failure) {
            failure(error, session);
        }
    }];
}

+ (void)fetchRegistDataWithPhoneNO:(NSString *)phoneNO1
                    recommentPhone:(NSString *)phoneNO2
                              code:(NSString *)code
                           success:(void (^)(id resultResponse, id resultModel))success
                           failure:(void (^)(NSError *error, LoginSession *session))failure {
    
    phoneNO1 = phoneNO1.notNull ? phoneNO1 : @"";
    phoneNO2 = phoneNO2.notNull ? phoneNO2 : @"";
    code     = code.notNull     ? code     : @"";
    
    NSDictionary *param = @{
                            @"code"      : code,
                            @"mobileNo"  : phoneNO1,
                            @"recommend" : phoneNO2};
    
    [JSLoginManager loginWithLoginType:LoginTypeRegister loginParam:param target:nil success:^(id  _Nonnull resultResponse, LoginSession * _Nonnull session) {
        if (success) {
            success(resultResponse, session);
        }
    } faild:^(NSError * _Nonnull error, LoginSession * _Nonnull session) {
        if (failure) {
            failure(error, session);
        }
    }];
}

+ (void)fetchSMSCodeDataWithPhoneNO:(NSString *)phoneNO
                               code:(NSString *)code
                            success:(void (^)(id resultResponse, id resultModel))success
                            failure:(void (^)(NSError *error, LoginSession *session))failure {
    
    NSDictionary *param = @{@"mobile" : phoneNO,
                            @"type"   : @"register",
                            @"flag"   : @"0",
                            @"code"   : code};
    NSLog(@"注册参数param : %@",param);
    [self publicFetchDataWithPath:@"common/sendMsgCode.do"
                            param:param
                      resultModel:nil
                          success:^(id resultResponse, id resultModel) {
                              
          if (success) {
              success(resultResponse, resultModel);
          }
      } failure:^(NSError *error, LoginSession *session) {
          if (failure) {
              failure(error, session);
          }
      }];
}

+ (void)fetchPlaceholderContentWithSuccess:(void (^)(id resultResponse, id resultModel))success
                                   failure:(void (^)(NSError *error, LoginSession *session))failure {
    
    [self publicFetchDataWithPath:@""
                            param:nil
                      resultModel:nil
                          success:^(id resultResponse, id resultModel) {
                              
        if (success) {
            success(resultResponse, resultModel);
        }
    } failure:^(NSError *error, LoginSession *session) {
        if (failure) {
            failure(error, session);
        }
    }];
}

+ (void)fetchSplashScreenImageWithUrl:(NSString *)url
                              success:(void (^)(id resultResponse))success
                              failure:(void (^)(NSError *error, LoginSession *session))failure {
    
    PCDNetWorkItem *tempItem = [[PCDNetWorkItem alloc] init];
    tempItem.urlString       = url;
    tempItem.completionBlock = ^(PCDNetWorkItem *object) {
        NSData *dataStr      = object.responseData;
        if (success) {
            success(dataStr);
        }
    };
    [PCDNetWorkServiceGet() addNetWork:tempItem];
}

+ (void)fetchSplashScreenDataWithSuccess:(void (^)(id resultResponse, id resultModel))success
                                 failure:(void (^)(NSError *error, LoginSession *session))failure {
    
    NSDictionary *param = @{@"OS" : @"channel_type_iphone"};
    
    [self publicFetchDataWithPath:@""
                            param:param
                      resultModel:nil
                          success:^(id resultResponse, id resultModel) {
                              
        if (success) {
            success(resultResponse, resultModel);
        }
    } failure:^(NSError *error, LoginSession *session) {
        if (failure) {
            failure(error, session);
        }
    }];
}

+ (void)fetchLoginDataWithParam:(NSDictionary *)param
                       loginUrl:(NSString *)url
                        success:(void (^)(id resultResponse, id resultModel))success
                        failure:(void (^)(NSError *error, LoginSession *session))failure {
    
    __weak typeof(self) weakSelf = self;

    [self publicFetchDataWithPath:url
                            param:param
                      resultModel:[LoginSession class]
                          success:^(id resultResponse, id resultModel) {
                   
        [weakSelf loginTimeoutWithSession:(LoginSession *)resultModel];
        if (success) {
            success(resultResponse, resultModel);
        }
    } failure:^(NSError *error, LoginSession *session) {
        if (failure) {
            failure(error, session);
        }
    }];
}

+ (void)publicFetchDataWithPath:(NSString *)path
                          param:(NSDictionary *)param
                    resultModel:(Class)resultModel
                        success:(void (^)(id resultResponse, id resultModel))success
                        failure:(void (^)(NSError *error, LoginSession *session))failure {
    
    param = param.notNull ? param : @{};
    [ClientNetManager requstWithURL:[PCDUtil getServerURL:path]
                       requestParam:param
              requestCompleteHandle:^(NSDictionary *resultDataDict) {
                  
        id modelClass = [self getModelClass:resultModel];
        if (resultModel && modelClass) {
            if ([resultDataDict isKindOfClass:[NSArray class]]) {
                NSMutableArray *dataArray = [modelClass mj_objectArrayWithKeyValuesArray:(NSArray *)resultDataDict];
                if (success) {
                    success(resultDataDict, dataArray);
                }
            } else {
                modelClass = [modelClass mj_objectWithKeyValues:(NSDictionary *)resultDataDict];
                if (success) {
                    success(resultDataDict, modelClass);
                }
            }
        } else {
            if (success) {
                success(resultDataDict, nil);
            }
        }
    } requestFailedHandle:^(NSError *error, LoginSession *session) {
        if (failure) {
            failure(error, session);
        }
    }];
}

+ (void)requstWithURL:(NSString *)URL
      requestParam:(NSDictionary *)param
requestCompleteHandle:(void(^)(NSDictionary * resultDataDict))completeHandle
  requestFailedHandle:(void(^)(NSError *error, LoginSession *session))faileHandle {
    
//    if (![PCUtil isInternetConnectionReachable])
//    {
//        [JSDeftAlert showAlert:@"请检查您的网络连接或稍后再试" doneTitle:@"确定" cancelTitle:nil doneHandle:nil cancelHandle:nil];
//        return;
//    }
    NSLog(@"param : %@",param);
    NSLog(@"URL : %@",URL);

    [PCDNetWorkServiceGet() sendRequestWithUrlString:URL requestType:REQUEST_METHOD_DEFAULT contentType:REQUEST_CONTENTTYPE_DEFAULT configEncryptBlock:^NSString * _Nonnull(NSString * _Nonnull unencryptJsonString) {
        return nil;
    } body:param andCompletionBlock:^(PCDNetWorkItem * _Nonnull item, BOOL success) {
        dispatch_async(dispatch_get_main_queue(), ^{
            NSDictionary *dict = [item.responseString JSONValue];
            dict = [dict objectForKey:@"body"];
            if (success) {
                if (completeHandle) {
                    completeHandle(dict);
                }
            } else {
                if (faileHandle) {
                    faileHandle(item.error, nil);
                }
            }
        });
    }];
}

+ (void)loginTimeoutWithSession:(LoginSession *)session {
    if ([session.STATUS isEqualToString:@"login_out"]) {
        [JSDeftAlert showAlert:session.MSG doneTitle:@"确定" cancelTitle:nil doneHandle:^{
            [JSLoginManager indexToHomePage];
            [JSLoginManager logoutClient];
        } cancelHandle:nil];
    }
}

+ (id)getModelClass:(Class)model {
    if (model) {
        NSString *class = NSStringFromClass([model class]);
        const char *className = [class cStringUsingEncoding:NSASCIIStringEncoding];
        Class modelClass = objc_getClass(className);
        
        return modelClass;
    }
    return nil;
}


@end
