//
//  JSRecordManager.m
//  录音
//
//  Created by Jack on 2019/3/8.
//  Copyright © 2019 Jack. All rights reserved.
//

#import "JSRecordManager.h"
#import <AVFoundation/AVFoundation.h>

@interface JSRecordManager () <AVAudioRecorderDelegate,AVAudioPlayerDelegate>
@property (nonatomic, strong) NSURL *urlPlay;
@property (nonatomic, strong) AVAudioRecorder *recorder;
@property (nonatomic, strong) AVAudioPlayer *audioPlayer;
@property (nonatomic, strong) AVAudioSession *audiosession;
@property (nonatomic, strong) NSMutableDictionary *recordConfig;
@property (nonatomic, strong) NSData *data;

@end
@implementation JSRecordManager

+ (id)shareInstance {
    static id manager ;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        manager = [[[self class] alloc] init];
    });
    return manager;
}

- (void)configAudioManager {
    [self.audiosession setCategory:AVAudioSessionCategoryPlayAndRecord error:nil];
    [self.audiosession setActive:YES error:nil];
}

- (NSURL *)urlPlay {
    if (!_urlPlay) {
        NSString * strUrl = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES)lastObject];
        NSURL * url = [NSURL fileURLWithPath:[NSString stringWithFormat:@"%@/voice.wav",strUrl]];
        _urlPlay = url;
    }
    return _urlPlay;
}

- (AVAudioSession *)audiosession {
    if (!_audiosession) {
        _audiosession = [AVAudioSession sharedInstance];
        [_audiosession setCategory:AVAudioSessionCategoryPlayAndRecord error:nil];
        [_audiosession setActive:YES error:nil];
    }
    return _audiosession;
}

- (AVAudioRecorder *)recorder {
    if (!_recorder) {
        NSError * error;
        _recorder = [[AVAudioRecorder alloc]initWithURL:self.urlPlay settings:self.recordConfig error:&error];
        _recorder.meteringEnabled = YES;//开启音量监测
        _recorder.delegate = self;
        if(error){
            NSLog(@"创建录音对象时发生错误，错误信息：%@",error.localizedDescription);
        }
    }
    return _recorder;
}

- (AVAudioPlayer *)audioPlayer {
    if (!_audioPlayer) {
        _audioPlayer = [[AVAudioPlayer alloc]initWithData:self.data error:nil];
        _audioPlayer.numberOfLoops = 0;//设置循环播放
        _audioPlayer.delegate = self;
    }
    return _audioPlayer;
}

- (NSMutableDictionary *)recordConfig {
    if (!_recordConfig) {
        _recordConfig = [[NSMutableDictionary alloc]init];
        [_recordConfig  setValue:[NSNumber numberWithInt:kAudioFormatLinearPCM] forKey:AVFormatIDKey];
        [_recordConfig  setValue:[NSNumber numberWithFloat:4000] forKey:AVSampleRateKey];
        [_recordConfig  setValue:[NSNumber  numberWithInt:1] forKey:AVNumberOfChannelsKey];
        [_recordConfig  setValue:[NSNumber numberWithInt:8] forKey:AVLinearPCMBitDepthKey];
        [_recordConfig  setValue:[NSNumber numberWithInt:AVAudioQualityHigh] forKey:AVEncoderAudioQualityKey];
    }
    return _recordConfig;
}

- (void)playRecord {
    [self.audioPlayer play];
}

- (void)startRecord {
    [self configAudioManager];
    
    if([self.recorder prepareToRecord]){
        [self.recorder record];
        NSLog(@"开始录音");
    }
}

- (void)stopRecordCompleted:(void(^)(NSString *recordBase64))completed {
    float voiceSize = self.recorder.currentTime;
    
    if ([self.audiosession category] != AVAudioSessionCategoryPlayback) {
        [self.audiosession setCategory:AVAudioSessionCategoryPlayback error:nil];
    }
    [self.recorder stop];
    
    if(voiceSize < 1.5) {return;}
    
    NSData *recordData = [NSData dataWithContentsOfURL:self.urlPlay];
    self.data = recordData;
    NSString *base64 = [recordData base64EncodedStringWithOptions:NSDataBase64Encoding64CharacterLineLength];
    if (completed) {
        completed(base64);
    }
}

- (void)removePath:(NSString *)path {
    NSFileManager *fileManager = [NSFileManager defaultManager];
    BOOL isExistFile = [fileManager fileExistsAtPath:path];
    if (isExistFile) {
        NSError *err;
        [fileManager removeItemAtPath:path error:&err];
        if (!err) {
            self.urlPlay = nil;
        } else {
            NSLog(@"err : %@",err.localizedDescription);
        }
    }
}

@end
