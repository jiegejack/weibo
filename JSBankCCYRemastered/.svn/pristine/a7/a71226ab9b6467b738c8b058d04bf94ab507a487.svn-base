//
//  NetWorkObserver.m
//  JSBankCCYRemastered
//
//  Created by Jack on 2019/6/18.
//  Copyright Â© 2019 Jack. All rights reserved.
//

#import "NetWorkObserver.h"

@interface NetWorkObserver ()
@property(nonatomic,strong)Reachability * reachabilityManager;
@property(nonatomic,copy)void(^block)(NetworkStatus state);

@end
@implementation NetWorkObserver

- (Reachability *)reachabilityManager {
    if (!_reachabilityManager) {
        _reachabilityManager = [Reachability reachabilityWithHostName:@"www.baidu.com"];
    }
    
    return _reachabilityManager;
}

+(NetWorkObserver *)shareInstance {
    static NetWorkObserver *netWork = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        netWork = [[NetWorkObserver alloc] init];
    });
    return netWork;
}

- (void)observerNetWorkState:(void(^)(NetworkStatus state))state {
    self.block = state;
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(observerStatus:) name:kReachabilityChangedNotification object:nil];
    [self.reachabilityManager startNotifier];
}

- (void)observerStatus:(NSNotification *)notif {
    NetworkStatus state = [self reachableStatus];
    if (self.block) {
        self.block(state);
    }
}

- (NetworkStatus)reachableStatus {
    Reachability *reachable = [Reachability reachabilityForInternetConnection];
    switch ([reachable currentReachabilityStatus]) {
        case NotReachable:
            return NotReachable;
        case ReachableViaWiFi:
            return ReachableViaWiFi;
        case ReachableViaWWAN:
            return ReachableViaWWAN;
        case ReachableVia2G:
            return ReachableVia2G;
        case ReachableVia3G:
            return ReachableVia3G;
        case ReachableVia4G:
            return ReachableVia4G;
        case ReachableViaGPRS:
            return ReachableViaGPRS;
        case ReachableViaHRPD:
            return ReachableViaHRPD;

        default:
            break;
    }
    return NotReachable;
}

@end
