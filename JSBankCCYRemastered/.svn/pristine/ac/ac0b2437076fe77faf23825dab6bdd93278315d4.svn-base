//
//  AlertExtension.m
//  AlertView
//
//  Created by Jack on 2019/5/16.
//  Copyright Â© 2019 Jack. All rights reserved.
//

#import "AlertExtension.h"
#import "UIAlertController+AlertController.h"

API_AVAILABLE(ios(8.0))
@interface AlertExtension ()
@property (nonatomic, strong) UIAlertController *alertController;
@property (nonatomic, strong) UIAlertAction *cancelAction;
@property (nonatomic, strong) UIAlertAction *otherAction;
@property (nonatomic, copy)   NSString *title;
@property (nonatomic, copy)   NSString *message;
@property (nonatomic, strong) UILabel *contentLabel;
@property (nonatomic, strong) UIButton *ok_button;
@property (nonatomic, assign) AlertType type;
@property (nonatomic, strong) UIView *contentView;

@end
@implementation AlertExtension

- (id)alertWithTitle:(NSString *)title message:(NSString *)message type:(AlertType)type {
    self.title = title;
    self.type = type;
    if (@available(iOS 8.0, *)) {
        self.message = type == AlertTypeCustom ? @"" : [NSString stringWithFormat:@"\n%@", message];
//        __weak typeof(self) weakSelf = self;
        self.alertController = [UIAlertController alertControllerWithTitle:title message:self.message preferredStyle:UIAlertControllerStyleAlert];
        self.alertController.action = ^{
            if (self.otherBlock) {
                self.otherBlock();
            }
        };

        if (type == AlertTypeCustom) {
            self.contentView = [[UIView alloc] init];
            self.contentView.layer.masksToBounds = YES;
            self.contentView.layer.cornerRadius = 10;
            [self.alertController.view addSubview:self.contentView];
            
            self.contentLabel = [[UILabel alloc] init];
            self.contentLabel.font = [UIFont systemFontOfSize:15];
            self.contentLabel.text = message;
            self.contentLabel.textColor = Color().MainBlack;
            self.contentLabel.numberOfLines = 0;
            self.contentLabel.textAlignment = NSTextAlignmentCenter;
            [self.contentView addSubview:self.contentLabel];
            
            self.ok_button = [UIButton buttonWithType:UIButtonTypeSystem];//[[UIButton alloc] init];
            self.ok_button.layer.masksToBounds = YES;
            self.ok_button.layer.cornerRadius = 20;
            self.ok_button.backgroundColor = Color().MainBlue;
            self.ok_button.titleLabel.font = [UIFont systemFontOfSize:16];
            [self.ok_button setTitleColor:Color().White forState:UIControlStateNormal];
            [self.contentView addSubview:self.ok_button];
            
            #pragma GCC diagnostic ignored "-Wundeclared-selector"
            [self.ok_button addTarget:self.alertController action:@selector(ccy_dismiss) forControlEvents:UIControlEventTouchUpInside];
            
            [self layouSubControls];
        }
        [self settingAttributedString:self.title font:[UIFont systemFontOfSize:17] color:Color().Black forKey:@"attributedTitle"];
        [self settingAttributedString:self.message font:[UIFont systemFontOfSize:15] color:Color().MainBlack forKey:@"attributedMessage"];
    } else {
        // Fallback on earlier versions
    }
    
    return self;
}

- (void)layouSubControls {
    [self.contentView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_equalTo(self.alertController.view.mas_left);
        make.top.mas_equalTo(self.alertController.view.mas_top);
        make.right.mas_equalTo(self.alertController.view.mas_right);
        make.bottom.mas_equalTo(self.alertController.view.mas_bottom);
    }];
    [self.contentLabel mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.contentView.mas_top).offset(56);
        make.centerX.mas_equalTo(self.contentView.mas_centerX);
        make.width.mas_equalTo(Width - 130);
    }];
    [self.ok_button mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.mas_equalTo(self.contentLabel.mas_bottom).offset(20);
        make.left.mas_equalTo(self.contentView.mas_left).offset(10);
        make.right.mas_equalTo(self.contentView.mas_right).offset(-10);
        make.height.mas_equalTo(40);
        make.bottom.mas_equalTo(self.contentView.mas_bottom).offset(-20);
    }];
}

- (void)showAlert {
    UIWindow *window = [UIApplication sharedApplication].delegate.window;
    [window.rootViewController presentViewController:self.alertController animated:YES completion:nil];
}

- (void)setOkButtonImage:(UIImage *)okButtonImage {
    _okButtonImage = okButtonImage;
    
    self.alertController.okButtonImage = okButtonImage;
}

- (void)setCancelButtonImage:(UIImage *)cancelButtonImage {
    _cancelButtonImage = cancelButtonImage;
    
    self.alertController.cancelButtonImage = cancelButtonImage;
}

- (void)setCancelButtonTitle:(NSString *)cancelButtonTitle {
    _cancelButtonTitle = cancelButtonTitle;
//    self.alertController.cancelButtonTitle = cancelButtonTitle.notNull ? cancelButtonTitle : @"";
    if (!cancelButtonTitle.notNull) {
        return;
    }
    if (self.type != AlertTypeCustom) {
        if (@available(iOS 8.0, *)) {
            self.cancelAction = [UIAlertAction actionWithTitle:cancelButtonTitle style:UIAlertActionStyleCancel handler:^(UIAlertAction * _Nonnull action) {
                if (self.cancelBlock) {
                    self.cancelBlock();
                }
            }];
        } else {
            // Fallback on earlier versions
        }
        [self.alertController addAction:self.cancelAction];
    }
}

- (void)setOtherButtonTitle:(NSString *)otherButtonTitle {
    _otherButtonTitle = otherButtonTitle;
//    self.alertController.otherButtonTitle = otherButtonTitle.notNull ? otherButtonTitle : @"";
    if (!otherButtonTitle.notNull) {
        return;
    }
    if (self.type == AlertTypeCustom) {
        [self.ok_button setTitle:otherButtonTitle forState:UIControlStateNormal];
    } else {
        if (@available(iOS 8.0, *)) {
            __weak typeof(self) weakSelf = self;
            self.otherAction = [UIAlertAction actionWithTitle:otherButtonTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
                if (weakSelf.otherBlock) {
                    weakSelf.otherBlock();
                }
            }];
            if (self.type == AlertTypeService) {
                UIImage *accessoryImage = [[UIImage imageNamed:@"service1.png"] imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate];
                [self.otherAction setValue:accessoryImage forKey:@"image"];
            }
        } else {
            // Fallback on earlier versions
        }
        [self.alertController addAction:self.otherAction];
    }
}

- (void)setOtherButtonColor:(UIColor *)otherButtonColor {
    _otherButtonColor = otherButtonColor;
    
    if (self.type == AlertTypeCustom) {
        [self.ok_button setTitleColor:otherButtonColor forState:UIControlStateNormal];
    } else {
//        [self.otherAction setValue:otherButtonColor forKey:@"_titleTextColor"];
        self.alertController.otherButtonColor = otherButtonColor;
    }
}

- (void)setCancelButtonColor:(UIColor *)cancelButtonColor {
    _cancelButtonColor = cancelButtonColor;
    
    if (self.type != AlertTypeCustom) {
//        [self.cancelAction setValue:cancelButtonColor forKey:@"_titleTextColor"];
        self.alertController.cancelButtonColor = cancelButtonColor;
    }
}

- (void)setCancelButtonFont:(UIFont *)cancelButtonFont {
    _cancelButtonFont = cancelButtonFont;
    
    self.alertController.cancelButtonFont = cancelButtonFont;
}

- (void)setOtherButtonFont:(UIFont *)otherButtonFont {
    _otherButtonFont = otherButtonFont;
    
    self.alertController.otherButtonFont = otherButtonFont;
}

- (void)setTitleFont:(UIFont *)titleFont {
    _titleFont = titleFont;
    
    [self settingAttributedString:self.title font:titleFont color:self.titleColor forKey:@"attributedTitle"];
}

- (void)setTitleColor:(UIColor *)titleColor {
    _titleColor = titleColor;
    
    [self settingAttributedString:self.title font:self.titleFont color:titleColor forKey:@"attributedTitle"];
}

- (void)setMessageFont:(UIFont *)messageFont {
    _messageFont = messageFont;
    
    if (self.type == AlertTypeCustom) {
        self.contentLabel.font = messageFont;
    } else {
        [self settingAttributedString:self.message font:messageFont color:self.messageColor forKey:@"attributedMessage"];
    }
}

- (void)setMessageColor:(UIColor *)messageColor {
    _messageColor = messageColor;
    
    if (self.type == AlertTypeCustom) {
        self.contentLabel.textColor = messageColor;
    } else {
        [self settingAttributedString:self.message font:self.messageFont color:messageColor forKey:@"attributedMessage"];
    }
}

- (void)settingAttributedString:(NSString *)string font:(UIFont *)font color:(UIColor *)color forKey:(NSString *)key {
    font = font ? font : [UIFont systemFontOfSize:16];
    color = color ? color : [UIColor blackColor];

    NSMutableAttributedString *titleAtt = [[NSMutableAttributedString alloc] initWithString:string];
    [titleAtt addAttribute:NSFontAttributeName value:font range:NSMakeRange(0, string.length)];
    [titleAtt addAttribute:NSForegroundColorAttributeName value:color range:NSMakeRange(0, string.length)];
    [self.alertController setValue:titleAtt forKey:key];
}

@end
