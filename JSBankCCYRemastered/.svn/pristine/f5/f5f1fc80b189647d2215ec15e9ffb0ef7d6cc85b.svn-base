//
//  OBUManager.m
//  zxyh
//
//  Created by wangyw on 2019/7/15.
//  Copyright © 2019年 CSII. All rights reserved.
//
#if TARGET_IPHONE_SIMULATOR
#else

#import "OBUManager.h"
#import <CoreBluetooth/CoreBluetooth.h>
#import "JYBlueObu.h"
#import "CardOwnerRecord.h"

typedef NS_ENUM(NSUInteger, OBUDeviceType) {
    OBUDeviceTypeGV,        //金溢
    OBUDeviceTypeJL,        //聚力
};

@interface OBUManager ()<CBCentralManagerDelegate,GVObuActionDelegate,JLObuSDKDelegate>{
    
    //读秒
    NSInteger timeCount;
}
@property (nonatomic,strong) NSTimer *timer;
@property (nonatomic,strong) CBCentralManager *centralManager;

//是否已有蓝牙开启状态
@property (nonatomic,assign) BOOL didUpdateStatus;
//蓝牙是否已打开
//是否已连接设备
@property (nonatomic,assign) BOOL isConnected;
//当前连接设备名称
@property (nonatomic,strong) NSString *currentObuName;
//当前连接设备UUID
@property (nonatomic,strong) NSString *currentObuUUID;
//设备类型
@property (nonatomic,assign) OBUDeviceType obuType;

//扫描到设备回调
@property (nonatomic,copy) obuCallBack searchObuSuccessCallback;
//获取SN回调
@property (nonatomic,copy) OBUCallback getObuSNCallback;
//获取持卡人信息回调
@property (nonatomic,copy) OBUCallback getObuCardOwnerInfoCallback;
//非秘钥激活回调
@property (nonatomic,copy) OBUCallback initiateObuCallback;
//回调类型
@property (nonatomic,assign) NSInteger currentObuCallbackType;

@end

@implementation OBUManager

+ (OBUManager *)shareInstance {
    static OBUManager *manager = nil;
    static dispatch_once_t token;
    dispatch_once(&token, ^{
        manager = [[OBUManager alloc] init];
    });
    return manager;
}

- (instancetype)init
{
    self = [super init];
    if (self) {
        self.centralManager = [[CBCentralManager alloc] initWithDelegate:self queue:nil];
    }
    return self;
}

#pragma mark - OBU SDK delegate
//OBU连接成功后回调
-(void)didDeviceConnected{
    NSLog(@"连接成功");
}

//OBU断开连接后回调
-(void)didDeviceDisConnected{
    NSLog(@"断开连接");
    self.isConnected = NO;
    self.currentObuName = nil;
    self.currentObuUUID = nil;
}

//设备连接失败后回调
-(void)didDeviceConnectFailed{
    NSLog(@"连接失败");
}

//发现蓝牙设备
- (void)didDiscoverBlueObu:(JLBleDevice * _Nonnull)obu desc:(NSString * _Nullable)szDesc {
    NSLog(@"didDiscoverBlueObu:%@",obu);
}
#pragma mark - CBCentralManagerDelegate
- (void)centralManagerDidUpdateState:(CBCentralManager *)central{
    self.isConnected = NO;

    switch (central.state) {
        case CBCentralManagerStateUnknown:
            NSLog(@">>>CBCentralManagerStateUnknown");
            self.isEnabledBluetooth = NO;
            self.isConnected = NO;
            break;
        case CBCentralManagerStateResetting:
            NSLog(@">>>CBCentralManagerStateResetting");
            self.isEnabledBluetooth = NO;
            self.isConnected = NO;
            break;
        case CBCentralManagerStateUnsupported:
            NSLog(@">>>CBCentralManagerStateUnsupported");
            self.isEnabledBluetooth = NO;
            self.isConnected = NO;
            break;
        case CBCentralManagerStateUnauthorized:
            NSLog(@">>>CBCentralManagerStateUnauthorized");
            self.isEnabledBluetooth = NO;
            self.isConnected = NO;
            break;
        case CBCentralManagerStatePoweredOff:
            NSLog(@">>>CBCentralManagerStatePoweredOff");
            self.isEnabledBluetooth = NO;
            self.isConnected = NO;
            break;
        case CBCentralManagerStatePoweredOn:
        {
            NSLog(@">>>CBCentralManagerStatePoweredOn");
            self.isEnabledBluetooth = YES;
        }
            break;
        default:
            break;
    }
}

- (void)getBluetoothStatus:(OBUCallback)callback{
    //如果已经有状态则直接返回接口,如果没有状态延时返回
    static BOOL isExcuted = NO;
    if (!isExcuted) {
        [LoadIndicator showLoadingIndicatorWithText:@"请稍后..." shouldTap:NO];
        [[ObuSDK sharedObuSDK] isEnabledBluetooth];//首次先调用以下，防止获取不到状态
    }

    float duration = isExcuted ? 0.0 : 1.6;
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(duration * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        isExcuted = YES;
        [LoadIndicator hiddenLoadingIndicator];
        if ([[ObuSDK sharedObuSDK] isEnabledBluetooth]){//蓝牙已开启
            callback(TRUE, @{@"STATUS":@"0",@"MSG":@"蓝牙已开启"}, @"蓝牙已开启");
        }else{//未开启
            callback(FALSE, @{@"STATUS":@"1",@"MSG":@"蓝牙未开启"}, @"蓝牙未开启");
        }
    });
}

/**
 扫描外设
 */
- (void)centralManager:(CBCentralManager *)central didDiscoverPeripheral:(CBPeripheral *)peripheral advertisementData:(NSDictionary<NSString *,id> *)advertisementData RSSI:(NSNumber *)RSSI{
    [LoadIndicator showLoadingIndicatorWithText:@"扫描外设..." shouldTap:NO];
    
    NSString *deviceName = [peripheral name];
    NSString *uuid = [[peripheral identifier] UUIDString];
    NSLog(@"deviceName : %@",deviceName);
    if ([deviceName hasPrefix:@"GV"]) {
        [LoadIndicator hiddenLoadingIndicator];
        [self stopScanObuDevice];
        self.obuType = OBUDeviceTypeGV;
        self.currentObuName = deviceName;
        self.currentObuUUID = uuid;
        NSLog(@"扫描到金溢设备");
        [self connectObuDevice];
        return;
    }
    
    if ([deviceName hasPrefix:@"JL"]) {
        [LoadIndicator hiddenLoadingIndicator];
        [self stopScanObuDevice];
        self.obuType = OBUDeviceTypeJL;
        self.currentObuName = deviceName;
        self.currentObuUUID = uuid;
        NSLog(@"扫描到聚力设备");
        [self connectObuDevice];
    }
}

#pragma mark - 连接设备
/**
 连接设备
 */
- (void)connectObuDevice{
    __weak typeof(self) weakSelf = self;
    [LoadIndicator showLoadingIndicatorWithText:@"设备连接中..." shouldTap:NO];

    if (self.obuType == OBUDeviceTypeGV) {
        [[ObuSDK sharedObuSDK] setObuActionDelegate:self];
        [[ObuSDK sharedObuSDK]connectDeviceWithId:self.currentObuUUID name:self.currentObuName timeout:3 callBack:^(Boolean status, NSObject *data, NSString *errorMsg) {
            dispatch_async(dispatch_get_main_queue(), ^{

            [LoadIndicator hiddenLoadingIndicator];

            NSLog(@"连接设备-->金溢status:%@,data:%@,errorMsg:%@",@(status),data,errorMsg);
            weakSelf.isConnected = status;
            if (status) {
                weakSelf.searchObuSuccessCallback(status, data, errorMsg);
                [JSDeftAlert showMessage:@"已连接到金溢OBU设备" afterDelay:1.5 completeHandle:nil];
            }else{
                [weakSelf connectObuDeviceFailureHandle:errorMsg];
                [JSDeftAlert showMessage:errorMsg afterDelay:1.5 completeHandle:nil];
            }
            });
        }];
    }else if (self.obuType == OBUDeviceTypeJL){
        [JLObuSDK setObuActionDelegate:self];
        [[JLObuSDK sharedObuSDK]connectDeviceWithId:self.currentObuUUID name:self.currentObuName timeout:3 callBack:^(Boolean status, NSObject * _Nullable data, NSString * _Nullable errorMsg) {
            dispatch_async(dispatch_get_main_queue(), ^{
            [LoadIndicator hiddenLoadingIndicator];

            NSLog(@"连接设备-->聚力status:%@,data:%@,errorMsg:%@",@(status),data,errorMsg);
            weakSelf.isConnected = status;
            if (status) {
                weakSelf.searchObuSuccessCallback(status, data, errorMsg);
                [JSDeftAlert showMessage:@"已连接到聚利OBU设备" afterDelay:1.5 completeHandle:nil];
            }else{
                [weakSelf connectObuDeviceFailureHandle:errorMsg];
                [JSDeftAlert showMessage:errorMsg afterDelay:1.5 completeHandle:nil];
            }
            });
        }];
    }
}

/**
 连接OBU设备失败处理
 */
- (void)connectObuDeviceFailureHandle:(NSString *)errorMsg{
    [JSDeftAlert showMessage:errorMsg afterDelay:1.5 completeHandle:nil];
}

/**
 开始扫描obu设备
 */
- (void)startScanObuDevice{
    timeCount = 0;
    [self.timer invalidate];
    self.timer = nil;

    NSLog(@"开始扫描");
    [self.centralManager scanForPeripheralsWithServices:nil options:nil];
    //开启定时
    NSTimer *timer = [NSTimer timerWithTimeInterval:1.0 target:self selector:@selector(scanTime) userInfo:nil repeats:YES];
    [[NSRunLoop currentRunLoop]addTimer:timer forMode:NSRunLoopCommonModes];
    [timer fire];
    self.timer = timer;
}

/**
 停止扫描obu设备
 */
- (void)stopScanObuDevice{
    NSLog(@"停止扫描");
    [self.centralManager stopScan];
    timeCount = 0;
    [self.timer invalidate];
    self.timer = nil;
}

/**
 倒计时处理
 */
- (void)scanTime{
    static BOOL isExcuted = NO;
    
    timeCount ++;
    NSLog(@"扫描设备计时:%ld",(long)timeCount);
    if (timeCount == 6) {//时间到
        [self stopScanObuDevice];
        [LoadIndicator hiddenLoadingIndicator];
        isExcuted = NO;
        if (self.getObuSNCallback && !isExcuted) {
            isExcuted = YES;
            self.getObuSNCallback(NO, @{@"STATUS" : @"1", @"MSG" : @"未连接到设备"}, @"未连接到设备");
        }
        if (self.getObuCardOwnerInfoCallback && !isExcuted) {
            isExcuted = YES;
            self.getObuCardOwnerInfoCallback(NO, @{@"STATUS" : @"1", @"MSG" : @"未连接到设备"}, @"未连接到设备");
        }
    }
}

#pragma mark - 获取设备SN信息
/**
 获取设备SN信息
 
 @param callback 回调
 */
- (void)getObuSN:(OBUCallback)callback{
    
    self.getObuSNCallback = callback;
    self.currentObuCallbackType = 1;
    
    if (self.isConnected) {//已连接直接调用
        [self getObuSNPrivate];
        return;
    }
    
    //重新搜索
    __weak typeof(self) weakSelf = self;
    self.searchObuSuccessCallback = ^(Boolean status, NSObject * _Nullable data, NSString * _Nullable errorMsg) {
        [weakSelf getObuSNPrivate];
    };
    [self startScanObuDevice];
}

- (void)getObuSNPrivate{
    __weak typeof(self) weakSelf = self;
    [LoadIndicator showLoadingIndicatorWithText:@"请稍后..." shouldTap:NO];

    if (self.obuType == OBUDeviceTypeGV) {
        [[ObuSDK sharedObuSDK] getObuInformation:^(Boolean status, NSObject *data, NSString *errorMsg) {
            dispatch_async(dispatch_get_main_queue(), ^{

            [LoadIndicator hiddenLoadingIndicator];

            NSLog(@"获取SN信息-->金溢status:%@,data:%@,errorMsg:%@",@(status),data,errorMsg);
            NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];
            if (status && [data isKindOfClass:[JYBlueObu class]]) {
                JYBlueObu *obu = (JYBlueObu *)data;
                dict[@"STATUS"] = @"0";
                dict[@"OBU_SN"] = SafeString(obu.sn);
                dict[@"MSG"] = SafeString(errorMsg);
            }else{
                dict[@"STATUS"] = @"1";
                dict[@"MSG"] = SafeString(errorMsg);
            }
            if (weakSelf.getObuSNCallback) {
                weakSelf.getObuSNCallback(status, dict, errorMsg);
            }
            });
        }];
    }else if (self.obuType == OBUDeviceTypeJL){
        [[JLObuSDK sharedObuSDK] getObuInformation:^(Boolean status, NSObject * _Nullable data, NSString * _Nullable errorMsg) {
            dispatch_async(dispatch_get_main_queue(), ^{

            [LoadIndicator hiddenLoadingIndicator];

            NSLog(@"获取SN信息-->聚力status:%@,data:%@,errorMsg:%@",@(status),data,errorMsg);
            NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];
            if (status && [data isKindOfClass:[NSDictionary class]]) {
                NSDictionary *tempDict = (NSDictionary *)data;
                dict[@"STATUS"] = @"0";
                dict[@"OBU_SN"] = SafeString(tempDict[@"sn"]);
                dict[@"MSG"] = SafeString(errorMsg);
            }else{
                dict[@"STATUS"] = @"1";
                dict[@"MSG"] = SafeString(errorMsg);
            }
            if (weakSelf.getObuSNCallback) {
                weakSelf.getObuSNCallback(status, dict, errorMsg);
            }
            });
        }];
    }
}

#pragma mark - 获取设备持卡人信息
/**
 获取设备持卡人信息
 
 @param callback 回调
 */
- (void)getObuCardOwnerInfo:(OBUCallback)callback{
    
    self.getObuCardOwnerInfoCallback = callback;
    self.currentObuCallbackType = 2;
    
    if (self.isConnected) {//已连接直接调用
        [self getObuCardOwnerInfoPrivate];
        return;
    }
    
    //重新搜索
    __weak typeof(self) weakSelf = self;
    self.searchObuSuccessCallback = ^(Boolean status, NSObject * _Nullable data, NSString * _Nullable errorMsg) {
        [weakSelf getObuCardOwnerInfoPrivate];
    };
    [self startScanObuDevice];
}

- (void)getObuCardOwnerInfoPrivate{
    __weak typeof(self) weakSelf = self;
    [LoadIndicator showLoadingIndicatorWithText:@"获取卡信息..." shouldTap:NO];

    if (self.obuType == OBUDeviceTypeGV) {
        [[ObuSDK sharedObuSDK] readCardOwnerRecord:^(Boolean status, NSObject *data, NSString *errorMsg) {
            dispatch_async(dispatch_get_main_queue(), ^{
            [LoadIndicator hiddenLoadingIndicator];

            NSLog(@"获取持卡人信息-->金溢status:%@,data:%@,errorMsg:%@",@(status),data,errorMsg);
            NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];
            if (status && [data isKindOfClass:[CardOwnerRecord class]]) {
                CardOwnerRecord *record = (CardOwnerRecord *)data;
                dict[@"ownerId"] = SafeString(record.ownerId);
                dict[@"staffId"] = SafeString(record.staffId);
                dict[@"ownerName"] = SafeString(record.ownerName);
                dict[@"ownerLicenseNumber"] = SafeString(record.ownerLicenseNumber);
                dict[@"ownerLicenseType"] = SafeString(record.ownerLicenseType);
                dict[@"STATUS"] = @"0";
                dict[@"MSG"] = SafeString(errorMsg);
            }else{
                dict[@"STATUS"] = @"1";
                dict[@"MSG"] = SafeString(errorMsg);
            }
            if (weakSelf.getObuCardOwnerInfoCallback) {
                weakSelf.getObuCardOwnerInfoCallback(status, dict, errorMsg);
            }
            });
        }];
    }else if (self.obuType == OBUDeviceTypeJL){
        [[JLObuSDK sharedObuSDK] readCardOwnerRecord:^(Boolean status, NSObject * _Nullable data, NSString * _Nullable errorMsg) {
            dispatch_async(dispatch_get_main_queue(), ^{

            [LoadIndicator hiddenLoadingIndicator];

            NSLog(@"获取持卡人信息-->聚力status:%@,data:%@,errorMsg:%@",@(status),data,errorMsg);
            NSMutableDictionary *dict = [[NSMutableDictionary alloc]init];
            if (status && [data isKindOfClass:[NSDictionary class]]) {
                NSDictionary *tempDict = (NSDictionary *)data;
                dict[@"ownerId"] = SafeString(tempDict[@"ownerId"]);
                dict[@"staffId"] = SafeString(tempDict[@"staffId"]);
                dict[@"ownerName"] = SafeString(tempDict[@"ownerName"]);
                dict[@"ownerLicenseNumber"] = SafeString(tempDict[@"ownerLicenseNumber"]);
                dict[@"ownerLicenseType"] = SafeString(tempDict[@"ownerLicenseType"]);
                dict[@"STATUS"] = @"0";
                dict[@"MSG"] = SafeString(errorMsg);
            }else{
                dict[@"STATUS"] = @"1";
                dict[@"MSG"] = SafeString(errorMsg);
            }
            if (weakSelf.getObuCardOwnerInfoCallback) {
                weakSelf.getObuCardOwnerInfoCallback(status, dict, errorMsg);
            }
            });
        }];
    }
}

#pragma mark - 非秘钥激活OBU设备
/**
 非秘钥激活OBU设备
 
 @param callback 回调
 */
- (void)initiateObu:(OBUCallback)callback{
    
    self.initiateObuCallback = callback;
    self.currentObuCallbackType = 3;
    
    if (self.isConnected) {//已连接直接调用
        [self initiateObuPrivate];
        return;
    }
    
    //重新搜索
    __weak typeof(self) weakSelf = self;
    self.searchObuSuccessCallback = ^(Boolean status, NSObject * _Nullable data, NSString * _Nullable errorMsg) {
        [weakSelf initiateObuPrivate];
    };
    [self startScanObuDevice];
}

/**
 非秘钥激活OBU设备
 内部方法
 */
- (void)initiateObuPrivate{
    __weak typeof(self) weakSelf = self;
    [LoadIndicator showLoadingIndicatorWithText:@"OBU设备激活中..." shouldTap:NO];

    if (self.obuType == OBUDeviceTypeGV) {
            [[ObuSDK sharedObuSDK]initiateOBU:^(Boolean status, NSObject *data, NSString *errorMsg0) {
                NSLog(@"非秘钥激活-->金溢status:%@,data:%@,errorMsg:%@",@(status),data,errorMsg0);
                if (status) {//执行成功后再查询
                    [[ObuSDK sharedObuSDK] esamChannel:@"00B0810063" callback:^(Boolean status, NSObject *data, NSString *errorMsg) {
                        dispatch_async(dispatch_get_main_queue(), ^{

                        [LoadIndicator hiddenLoadingIndicator];

                        unsigned char initiateCode;
                        [(NSData *)data getBytes:&initiateCode range:NSMakeRange(26, 1)];
                        //0x01已激活 0x02未激活 0x00已失效
                        if (initiateCode == 0x01) {//OBU已激活
                            if (weakSelf.initiateObuCallback) {
                                weakSelf.initiateObuCallback(YES, @{@"STATUS" : @"0", @"MSG" : @"已激活"}, @"已激活");
                            }
                        }else{
                            if (weakSelf.initiateObuCallback) {
                                weakSelf.initiateObuCallback(NO, @{@"STATUS" : @"1", @"MSG" : errorMsg}, errorMsg);
                            }
                        }
                        });
                    }];
                }else{
                    if (weakSelf.initiateObuCallback) {
                        weakSelf.initiateObuCallback(NO, @{@"STATUS" : @"1", @"MSG" : errorMsg0}, errorMsg0);
                    }
                }
            }];
        
    }else if (self.obuType == OBUDeviceTypeJL){
        [[JLObuSDK sharedObuSDK] initiateOBU:nil callBack:^(Boolean status, NSObject * _Nullable data, NSString * _Nullable errorMsg) {
            dispatch_async(dispatch_get_main_queue(), ^{

            [LoadIndicator hiddenLoadingIndicator];

            //status:0,data:(null),errorMsg:防拆位正常
            NSLog(@"非秘钥激活-->聚力status:%@,data:%@,errorMsg:%@",@(status),data,errorMsg);
            NSDictionary *tempDict = (NSDictionary *)data;
            if (weakSelf.initiateObuCallback) {
                weakSelf.initiateObuCallback(status, tempDict, errorMsg);
            }
            });
        }];
    }
}

#pragma mark - 其他
- (NSString *)bytesToHexString:(unsigned char *)bytes len:(int)len{
    if(len <= 0)
        return nil;
    
    int b = 0;
    NSArray *arBin2Hex = @[@"0",@"1",@"2",@"3",@"4",@"5",@"6",@"7",@"8",@"9",@"A",@"B",@"C",@"D",@"E",@"F"];
    NSMutableString *resultStr = [[NSMutableString alloc] init];
    for(int i=0; i<len; i++)
    {
        b = bytes[i];
        NSString *a1 = [arBin2Hex objectAtIndex:(b >> 4)];
        NSString *a2 = [arBin2Hex objectAtIndex:(b & 0xf)];
        [resultStr appendString:a1];
        [resultStr appendString:a2];
    }
    
    return resultStr;
}
@end
#endif
