//
//  InitPageTitle.m
//  H5Container
//
//  Created by dk on 2018/6/7.
//  Copyright © 2018年 dk. All rights reserved.
//

#import "InitPageTitle.h"
#import "WebNavigationItem.h"
#import "MJExtension.h"


@interface InitPageTitle()
@property (nonatomic, strong) JSBaseWebViewController *webView;

@property (nonatomic, strong) WebNavigationItem *navDO;
/**
 *导航栏元素颜色（左右按钮、导航栏标题）
 */
@property(nonatomic,strong)  UIColor *navigationTinColor;

@end

@implementation InitPageTitle

- (void)handler:(id)data andContext:(PCDContext *)context ResponseCallback:(WVJBResponseCallback )responseCallback {
    self.webView = (JSBaseWebViewController *)context.viewController;
    NSDictionary *dict = (NSDictionary *)data;
    if (!dict.notNull) {return;}
    self.navDO = [WebNavigationItem mj_objectWithKeyValues:dict];
//    RightButton *rightButton = [[RightButton alloc] init];
//    rightButton.icon = @"share";
//    RightButton *rightButton1 = [[RightButton alloc] init];
//    rightButton1.icon = @"service";
//
//    self.navDO.rightButton = @[rightButton, rightButton1];
//    self.navDO.title = @"串串盈测试";
    NSString *titleColorStr   = self.navDO.tcolor;//[dict valueForKey:@"tcolor"];
    NSString *naviBarColorStr = self.navDO.background;
    NSString *hide_Flag       = self.navDO.hide;//[dict valueForKey:@"hide"];
    NSString *stick           = self.navDO.stick;//[dict valueForKey:@"hide"];
    NSString *lucency         = self.navDO.lucency; //1透明
    NSString *topColor    = self.navDO.topColor;

    //标题颜色
    self.navigationTinColor   = titleColorStr.notNull ? [UIColor colorFormString:titleColorStr]     : [UIColor blackColor];
    //导航栏颜色
    UIColor *naviBarColor     = naviBarColorStr.notNull ? [UIColor colorFormString:naviBarColorStr] : [UIColor whiteColor];
    UIColor *statusBColor     = topColor.notNull ? [UIColor colorFormString:topColor] : [UIColor whiteColor];

    //设定隐藏导航栏时候的状态栏颜色 (框架原因 实际上隐藏导航栏就是把webView上移，漏出的还是导航栏)
    if (topColor.notNull) {
        self.webView.navigationBar.backgroundColor = statusBColor;
    }

    //隐藏导航栏
    BOOL hiddenNaviBar = NO;
    if (hide_Flag.notNull) {hiddenNaviBar = hide_Flag.boolValue;}
    if (hiddenNaviBar) {
        if (!topColor.notNull) {
            self.webView.navigationBar.alpha = !hiddenNaviBar;
        }
        self.webView.hiddenNaviBar = YES;
        return;
    }
    if (stick.boolValue) {
        self.webView.stickNaviBar = stick.boolValue;
    }
    if (lucency.boolValue) {
        self.webView.navigationBar.backgroundColor = [[UIColor whiteColor] colorWithAlphaComponent:stick ? 0.0 : 1.0];
        self.webView.navigationBar.separatorColor = [UIColor clearColor];
    } else {
        //导航栏背景色
        self.webView.navigationBar.backgroundColor = naviBarColor;
        self.webView.navigationBar.separatorColor = Color().Auxiliary;
    }
    
    //设置标题
    self.webView.title = self.navDO.title.notNull ? self.navDO.title : @"";

    //设置左按钮
    if (self.navDO.leftButton.count) {
        self.webView.navigationBar.leftBarButtonItem = [self barButtonItemWithPosition:1];
    } else {
        self.webView.navigationBar.leftBarButtonItem = nil;
    }
    //设置右边按钮
    if (self.navDO.rightButton.count) {
        self.webView.navigationBar.rightBarButtonItem = [self barButtonItemWithPosition:0];
    } else {
        self.webView.navigationBar.rightBarButtonItem = nil;
    }

    //导航栏元素
    self.webView.navigationBar.titleItem.titleColor          = self.navigationTinColor;
    self.webView.navigationBar.leftBarButtonItem.titleColor  = self.navigationTinColor;
    self.webView.navigationBar.rightBarButtonItem.titleColor = self.navigationTinColor;
    
    [self.webView.navigationBar setNeedsLayout];
    
//    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(16.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
//        [self.webView.tabBarController.navigationController popViewControllerAnimated:YES];
//    });
}

- (PCDBarButtonItem *)barButtonItemWithPosition:(NSInteger)position {
    CGFloat width = 0;
    CGFloat lastWidth = 0.0;
    CGFloat margin = 16;
    CGFloat contentViewWidth = 160;
    CGFloat contentViewHeight = self.webView.navigationBarHeight - 20;
    CGFloat height = contentViewHeight;

    UIView *contentView = [[UIView alloc] init];
//    contentView.backgroundColor = [UIColor redColor];
    contentView.frame = CGRectMake(0, 0, contentViewWidth, contentViewHeight);
    
    NSArray *items = [NSArray array];
    if (position) {
        items = self.navDO.leftButton;
    } else {
        items = self.navDO.rightButton;
    }
    if (!items.count) {
        return nil;
    }
    for (NSInteger index = 0; index < items.count; index++) {
        NSString *icon;
        NSString *name;
        if (position) {
            LeftButton *buttonDo = items[index];
            icon = buttonDo.icon;
            name = buttonDo.name;
        } else {
            RightButton *buttonDo = items[index];
            icon = buttonDo.icon;
            name = buttonDo.name;
        }
        UIButton *buttonItem = [[UIButton alloc] init];//[UIButton buttonWithType:UIButtonTypeSystem];
        buttonItem.tag = index;
//        buttonItem.backgroundColor = [UIColor blueColor];
        if (icon.notNull) {
            width = 25;
            buttonItem.imageView.contentMode = UIViewContentModeScaleAspectFit;
            buttonItem.imageView.tintColor = self.navigationTinColor;
//            UIImageRenderingMode mode = !position ? UIImageRenderingModeAlwaysOriginal : UIImageRenderingModeAlwaysTemplate;
            UIImageRenderingMode mode = UIImageRenderingModeAlwaysOriginal;
            UIImage *image = [[UIImage imageNamed:icon] imageWithRenderingMode:mode];
            [buttonItem setImage:image forState:UIControlStateNormal];
        } else {
            width = 46;
            [buttonItem setTitle:name forState:UIControlStateNormal];
            buttonItem.titleLabel.font = [UIFont systemFontOfSize:15.3];
            [buttonItem setTitleColor:self.navigationTinColor forState:UIControlStateNormal];
        }
        buttonItem.hitTestEdgeInsets = UIEdgeInsetsMake(0, -margin / 2, 0, -margin / 2);
        if (position) {
            buttonItem.frame = CGRectMake(index * lastWidth + index * margin, (contentViewHeight - height) / 2, width, height);
            [buttonItem addTarget:self action:@selector(leftAction:) forControlEvents:UIControlEventTouchUpInside];
        } else {
            buttonItem.frame = CGRectMake(CGRectGetWidth(contentView.frame) - index * lastWidth - index * margin - width, (contentViewHeight - height) / 2, width, height);
            [buttonItem addTarget:self action:@selector(rightAction:) forControlEvents:UIControlEventTouchUpInside];
        }
        [contentView addSubview:buttonItem];
        lastWidth = width;
    }

    
    PCDBarButtonItem *barButtonItem = [[PCDBarButtonItem alloc]initWithCustomView:contentView];
    if (!position) {
        barButtonItem.contentInsets = UIEdgeInsetsMake(0, -16, 0, 0);
    } else {
        barButtonItem.contentInsets = UIEdgeInsetsMake(0, 0, 0, 0);
    }
    
    return barButtonItem;
}

- (void)leftAction:(UIButton *)button {
    LeftButton *leftButton = self.navDO.leftButton[button.tag];
    NSString *funcName = leftButton.func;

    [self.webView.bankWebView stopLoading];
    if (funcName.notNull) {
        evaluateJavaScriptOnMainThread(self, funcName, @"");
    } else if ([self.webView.bankWebView canGoBack]) {
        [self.webView.bankWebView goBack];
    } else {
        [self.webView.tabBarController.navigationController popViewControllerAnimated:YES];
    }
}

- (void)rightAction:(UIButton *)button {
    RightButton *rightButton = self.navDO.rightButton[button.tag];
    NSString *funcName = rightButton.func;
    
    if (funcName.notNull) {
        evaluateJavaScriptOnMainThread(self, funcName, @"");
    }
}

@end
