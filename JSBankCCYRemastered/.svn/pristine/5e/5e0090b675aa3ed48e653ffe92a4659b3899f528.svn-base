//
//  CTMediator+CTMediatorModuleAActions.m
//  CTMediator
//
//  Created by casa on 16/3/13.
//  Copyright © 2016年 casa. All rights reserved.
//

#import "CTMediator+CTMediatorModuleActions.h"




NSString * const PCDTMediatorViewController = @"CreateViewController";

NSString * const PCDTMediatorTarget      = @"MediatorRegistryManagement";

NSString * const PCDTMediatorLoginTarget = @"MediatorLoginTarget";
NSString * const PCDTMediatorH5ContainerTarget = @"MediatorH5ContainerTarget";
NSString * const PCDTMediatorScanTarget = @"MediatorScanTarget";
NSString * const PCDTMediatorCreateCodeTarget = @"MediatorCreateCodeTarget";
NSString * const PCDTMediatorFileBrowserTarget = @"MediatorFileBrowserTarget";
NSString * const PCDTMediatorShareSDKTarget = @"MediatorShareSDKTarget";
NSString * const PCDTMediatorKeyBoardTarget = @"MediatorKeyBoardTarget";
NSString * const PCDTMediatorGestureTarget = @"MediatorGestureTarget";
NSString * const PCDTMediatorFaceIDTarget = @"MediatorFaceIDTarget";
NSString * const PCDTMediatorNetServiceTarget = @"MediatorNetServiceTarget";
NSString * const PCDTMediatorMenuChildTarget = @"MediatorMenuChildTarget";


NSString * const kCTMediatorActionNativePresentImage = @"nativePresentImage";
NSString * const kCTMediatorActionNativeNoImage = @"nativeNoImage";
NSString * const kCTMediatorActionShowAlert = @"showAlert";
NSString * const kCTMediatorActionCell = @"cell";
NSString * const kCTMediatorActionConfigCell = @"configCell";

@implementation CTMediator (CTMediatorModuleActions)

-(UIViewController *)CTMediatorViewController:(NSString *)className Params:(NSDictionary *)params
{
    NSMutableDictionary *newParams = [NSMutableDictionary dictionaryWithDictionary:params];
    if (className && className.length) {
        [newParams setObject:className forKey:@"className"];
    }
    
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorViewController
                                                    params:newParams
                                         shouldCacheTarget:NO];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}


- (UIViewController *)CTMediatorLoginViewController:(NSDictionary *)params CompleteAction:(void(^)(BOOL error,id session))complete
{
    NSMutableDictionary *paramsToSend = [[NSMutableDictionary alloc] init];
    
    if (params) {
        paramsToSend = [NSMutableDictionary dictionaryWithDictionary:params];
    }
    
    if (complete) {
        paramsToSend[@"completeAction"] = complete;
    }
    
    
    
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorLoginTarget
                                                    params:paramsToSend
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}

/**
 *H5页面模块调用
 */
- (UIViewController *)CTMediatorH5ContainerViewController:(NSDictionary *)params
{
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorH5ContainerTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}


- (UIViewController *)CTMediatorScanTarget:(NSDictionary *)params
{
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorScanTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}


- (UIViewController *)CTMediatorCreateCodeTarget:(NSDictionary *)params
{
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorCreateCodeTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}



- (UIViewController *)CTMediatorFileBrowserTarget:(NSDictionary *)params
{
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorFileBrowserTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}



- (UIViewController *)CTMediatorShareSDKTarget:(NSDictionary *)params
{
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorShareSDKTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}


- (UIViewController *)CTMediatorKeyBoardTarget:(NSDictionary *)params
{
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorKeyBoardTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}

- (UIViewController *)CTMediatorGestureTarget:(NSDictionary *)params CompleteAction:(void(^)(BOOL error,id session))complete
{
    NSMutableDictionary *paramsToSend = [[NSMutableDictionary alloc] init];
    
    if (params) {
        paramsToSend = [NSMutableDictionary dictionaryWithDictionary:params];
    }
    
    if (complete) {
        paramsToSend[@"completeAction"] = complete;
    }
    
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorGestureTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}

- (UIViewController *)CTMediatorNetServiceTarget:(NSDictionary *)params
{
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorNetServiceTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        // view controller 交付出去之后，可以由外界选择是push还是present
        return viewController;
    } else {
        // 这里处理异常场景，具体如何处理取决于产品
        return [[UIViewController alloc] init];
    }
}

- (UIViewController *)CTMediatorMenuChildTarget:(NSDictionary *)params
{
    UIViewController *viewController = [self performTarget:PCDTMediatorTarget
                                                    action:PCDTMediatorMenuChildTarget
                                                    params:params
                                         shouldCacheTarget:YES];
    
    if ([viewController isKindOfClass:[UIViewController class]]) {
        return viewController;
    } else {
        return [[UIViewController alloc] init];
    }
}

- (BOOL)CTMediatorFaceIDTarget:(NSDictionary *)params
{
    BOOL error = [self performTarget:PCDTMediatorTarget
                              action:PCDTMediatorFaceIDTarget
                              params:params
                   shouldCacheTarget:YES];
    
    return error;
}



- (void)CTMediator_cleanTableViewCellTarget
{
    [self releaseCachedTargetWithTargetName:PCDTMediatorTarget];
}

@end
