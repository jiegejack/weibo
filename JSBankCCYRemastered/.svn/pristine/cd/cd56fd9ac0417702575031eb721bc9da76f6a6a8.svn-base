//
//  PCDGestureLockView.h
//  PCKit
//
//  Created by wangyong on 16/4/19.
//  Copyright © 2016年 P&C Information. All rights reserved.
//

#import <UIKit/UIKit.h>

/**
 对应操作状态

 - PCDGestureSetDefault: 设置，默认
 - PCDGestureSetAgain: 第一次设置完成，准备第二次设置
 - PCDGestureSetDifferent: 第二次设置与第一次设置不同
 - PCDGestureSetSuccess: 设置成功
 - PCDGestureVerifyDefault: 验证
 - PCDGestureUnallowed: 输入不合法
 - PCDGestureVerifyFailure: 验证失败
 - PCDGestureVerifyUnSet: 未设置
 - PCDGestureVerifySuccess: 验证成功
 - PCDGestureSetSame :与原手势密码相同（设置）
 */
typedef NS_ENUM(NSUInteger, PCDGestureOperation) {
    PCDGestureSetDefault =0,
    PCDGestureSetAgain =1,
    PCDGestureSetDifferent =2,
    PCDGestureSetSuccess =3,
    PCDGestureVerifyDefault =4,
    PCDGestureUnallowed =5,
    PCDGestureVerifyFailure =6,
    PCDGestureVerifyUnSet =7,
    PCDGestureVerifySuccess =8,
    PCDGestureSetSame =9,
};

/**
 节点对应属性
 */
@interface PCDGestureLockItem : NSObject
//默认状态图片
@property(nullable,nonatomic,strong) UIImage *image;
//选中状态图片
@property(nullable,nonatomic,strong) UIImage *imageHL;
//错误状态图片
@property(nullable,nonatomic,strong) UIImage *errorImage;
//外环宽度，默认1.0f
@property(nonatomic,assign) CGFloat shellWidth;
//默认状态颜色
@property(nullable,nonatomic,strong) UIColor *shellColor;
//高亮状态颜色(包含内外环和角度)
@property(nullable,nonatomic,strong) UIColor *shellColorHL;
//错误状态颜色
@property(nullable,nonatomic,strong) UIColor *shellErrorColor;
//是否显示方向，默认显示
@property(nonatomic,assign) BOOL showDirection;
//间隔，默认44.0f
@property(nonatomic,assign) CGFloat itemViewInterval;

@end
/**
 缩略图属性
 */
@interface PCDGestureThumbItem : NSObject
//节点默认颜色
@property(nullable,nonatomic,strong) UIColor *thumbColor;
//节点高亮颜色
@property(nullable,nonatomic,strong) UIColor *thumbColorHL;
//节点默认图片
@property(nullable,nonatomic,strong) UIImage *thumbImage;
//节点高亮图片
@property(nullable,nonatomic,strong) UIImage *thumbImageHL;
//缩略图的边长，默认70.0f
@property(nonatomic,assign) CGFloat thumbWidth;
@end

@protocol PCDGestureLockViewDataSource,PCDGestureLockViewDelegate;
/**
 手势密码视图
 */
@interface PCDGestureLockView : UIView

//行数，默认3行。就是九点布局，最小2，最大10
@property(nonatomic,assign) NSUInteger rowCount;

//轨迹颜色
@property(nonnull,nonatomic,strong) UIColor *trackColor;

//错误轨迹颜色
@property(nonnull,nonatomic,strong) UIColor *errorTrackColor;

//错误操作的显示时间，默认0.5秒
@property(nonatomic,assign) NSTimeInterval errorDuration;

//轨迹宽度，默认 1.0f
@property(nonatomic,assign) CGFloat trackWidth;

//是否显示轨迹，默认显示
@property(nonatomic,assign) BOOL showTrack;

//是否显示连续的轨迹，前提是showTrack为YES
@property(nonatomic,assign) BOOL showContinualTrack;

//静默操作，将无任何显示变化。默认NO
@property(nonatomic,assign) BOOL silentMode;

//设置手势密码时，第二次错误后，是否两次都重新绘制，默认为NO（YES：错误后，两次重新绘制；NO：错误后，继续输入第二次手势）
@property(nonatomic,assign) BOOL isRepaint;

//设置新密码时不能与原密码相同 YES：不能相同，NO：可以相同,默认为NO；
@property(nonatomic,assign) BOOL isSetDifferent;

//原手势密码(配合上面使用)
@property(nonatomic,strong) NSString * lastGesturePwd;

//允许最小密码个数，默认4
@property(nonatomic,assign) NSUInteger minPwdLength;

//允许最大验证次数，默认5次。主要用于本地密码验证
@property(nonatomic,assign) NSUInteger maxVerifyCount;

//剩余验证次数，只读
@property(nonatomic,readonly,assign) NSUInteger residueVerifyCount;

//九点布局的位置偏移
@property(nonatomic,assign) CGPoint lockViewOffset;

//缩略图的位置偏移
@property(nonatomic,assign) CGPoint thumbViewOffset;

//提示标签的位置偏移
@property(nonatomic,assign) CGPoint tipsViewOffset;

//提示label
@property(nullable,nonatomic,strong) UILabel *tipsLabel;

//数据源
@property(nullable,nonatomic,weak) IBOutlet id <PCDGestureLockViewDataSource>dataSource;

//代理
@property(nullable,nonatomic,weak) IBOutlet id <PCDGestureLockViewDelegate>delegate;

//是否隐藏缩略图
-(void)setThumbViewHidden:(BOOL)hidden;

//重置设置状态
-(void)resetSetting;

/**
 *  @brief  设置手势密码操作模式
 *
 *  @param isLocal    是否本地操作
 *  @param isSet      是否设置、还是验证
 *  @param identifier 唯一标识，可不传
 */
-(void)setLocalMode:(BOOL)isLocal isSetting:(BOOL)isSet uniqueIdentifier:(nullable NSString *)identifier;

/**
 *  根据唯一标识获得开关状态
 *
 *  @param identifier identifier 唯一标识，没有唯一标识的概念就传nil
 *
 *  @return 0:表示未设置过;1:设置过且已打开;2:设置过但未打开
 */
+(NSUInteger)getStatusWithUniqueIdentifier:(nullable NSString *)identifier;

/**
 *  根据唯一标识设置开关状态
 *
 *  @param identifier 唯一标识，没有唯一标识的概念就传nil
 *  @param isOn       带设置的开关状态
 */
+(void)setStatusWithUniqueIdentifier:(nullable NSString *)identifier isOn:(BOOL)isOn;

@end

@protocol PCDGestureLockViewDataSource <NSObject>

@optional
/**
 *  @brief 设置手势密码的样式
 *
 *  @param lockView PCDGestureLockView
 *
 *  @return PCDGestureLockItem
 */
-(nullable PCDGestureLockItem *)itemSettingOfGestureLockView:(nonnull PCDGestureLockView *)lockView;
/**
 *  @brief 设置缩略图样式
 *
 *  @param lockView PCDGestureLockView
 *
 *  @return PCDGestureThumbItem
 */
-(nullable PCDGestureThumbItem *)thumbSettingOfGestureLockView:(nonnull PCDGestureLockView *)lockView;
/**
 *  @brief 自定义提示内容
 *
 *  @param lockView  PCDGestureLockView
 *  @param operation 操作类型
 *
 *  @return 提示内容
 */
-(nullable NSString *)lockView:(nonnull PCDGestureLockView *)lockView tipsForOperation:(PCDGestureOperation)operation;

@end

@protocol PCDGestureLockViewDelegate <NSObject>

@optional
/**
 *  @brief  结束设置操作
 *
 *  @param lockView    PCDGestureLockView
 *  @param information 信息，非本地模式将明文输出
 */
-(void)lockView:(nonnull PCDGestureLockView *)lockView endSetting:(nullable NSString *)information;
/**
 *  @brief  结束验证操作
 *
 *  @param lockView    PCDGestureLockView
 *  @param information 信息，非本地模式将明文输出
 */
-(void)lockView:(nonnull PCDGestureLockView *)lockView endVerify:(nullable NSString *)information;

@end
